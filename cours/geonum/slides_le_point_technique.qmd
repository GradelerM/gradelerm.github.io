---
title: "Serveurs Carto et OpenLayers - le point technique"
author: "Marie Gradeler"
date: 27 Nov 2024
format: 
  revealjs: 
    theme: [default, ../../styles/slides.scss]
    transition: slide
    controls: true
    controls-layout: edges
    footer: "Formation WebCarto GeoNum 2024 -2025"
    logo: ../../static/logos/logo-geonum.webp
---

## Sommaire

-   PrÃ©sentation brÃ¨ve dâ€™OpenLayers

-   Les bases de Node JS

-   De quelle architecture on a besoinÂ ?

-   VMs, Docker et Docker Compose

-   Notre Docker Compose

Et si on avance bien, aujourdâ€™hui on aura non pas **UN** mais **DEUX** coursÂ ! Alors ne perdons pas de temps et en avantÂ !

![](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExMnpieGN1MXJ4NzZvZ3Vzd2R5ODN6cGtvOGk5MTNqaG91MGd5aXlhMyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Uow8AG1hMg1qxfWrzQ/giphy.webp){fig-alt="GIF : Rick et Morty dÃ©sespoir" fig-align="center"}

## PrÃ©sentation brÃ¨ve dâ€™OpenLayers

-   [OpenLayers](https://openlayers.org/) est une librairie JavaScript Open Source qui permet de crÃ©er des cartes interactives pour le web.

-   La librairie a plus de 11Â 000 stars sur GitHub et 3Â 000 forks.

-   Au moment oÃ¹ jâ€™Ã©cris ce cours, la derniÃ¨re mise Ã  jour date dâ€™il y a deux jours.

-   Lâ€™alpha dâ€™OpenLayers (premiÃ¨re version mise en ligne sur GitHub) date de 2013.

**Câ€™est une librairie populaire, mature, maintenue et bien documentÃ©e.**

![](media/openlayers_site.png){fig-alt="GIF : Site de OpenLayers" fig-align="center" width="620"}

## PrÃ©sentation brÃ¨ve dâ€™OpenLayers

ğŸ¤” Ã‡a ressemble en tout point Ã  [Leaflet](https://leafletjs.com/), nonÂ ? Alors pourquoi apprendre les deuxÂ ?

. . .

ğŸ‘‰ Oui et nonÂ !

-   **Leaflet** est plus pratique pour obtenir rapidement une "jolie" carte avec moins de code, par exemple afficher/masquer les couches.

-   Mais Leaflet a aussi ses dÃ©fautsÂ : la carte est plus difficile Ã  customiser "en profondeur" quâ€™OpenLayers, il y a de nombreux plug-ins qui parfois font plus ou moins la mÃªme chose, parfois ne sont plus maintenus, lÃ  oÃ¹ beaucoup de ces fonctionnalitÃ©s sont disponibles dans le code de base dâ€™OpenLayers.

. . .

**Pour faire simple**, selon mon expÃ©rience avec les deux librairies, **OpenLayers est plus facilement customisable et se repose moins sur des plug-ins externes.** Il existe une source de plug-ins pour ajouter des fonctionnalitÃ©s supplÃ©mentaires publiÃ©e par lâ€™utilisateur GitHub [viglino](https://github.com/Viglino). Ces extensions [ol-ext](https://viglino.github.io/ol-ext/) sont rÃ©guliÃ¨rement maintenues.

## PrÃ©sentation brÃ¨ve dâ€™OpenLayers

Il est donc intÃ©ressant de savoir utiliser Ã  la fois Leaflet et OpenLayers car chacune des librairies a ses points forts et ses faiblesses.

Cela dit, en ce qui concerne un usage simplifiÃ©, **si vous comprenez Leaflet vous comprenez aussi OpenLayers**.

![](media/la_webcarto_libre.jpg){fig-alt="GIF : Leaflet et OpenLayers, la webcarto libre" fig-align="center" width="356"}

On va devoir crÃ©er une application Node JS pour pouvoir importer la librairie OpenLayers et commencer Ã  coder.

## Les bases de Node JS

Node JS, câ€™est ce quâ€™on appelle un environnement runtime de JavaScript.

VoilÃ . On continueÂ ?

![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExcXNsN2xrc2kzM3dleGRhcXgya3o1dnAwdWlpb2FzbmNuMW5xa2pidCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3o84TZ6rOiGqdpzNRe/giphy.webp){fig-alt="GIF : Perceval dit \"j'ai rien compris\"" fig-align="center"}

## Les bases de Node JS

Pour simplifier, voyons comment vous Ã©crivez et exÃ©cutez votre code JavaScript jusquâ€™Ã  maintenant.

-   On crÃ©e un document `index.html` dans lequel on met quelque part une balise `<script>`

-   On Ã©crit le code dans la balise `<script>`

-   On ouvre `index.html` dans le navigateur

-   Comme le JavaScript est dans `index.html` qui est ouvert dans un navigateur, le navigateur peut exÃ©cuter le code JavaScript

**Ce nâ€™est pas super pratique quand on commence Ã  avoir une application qui grandit (ou "scale").**

## Les bases de Node JS

La force de Node JS est de permettre dâ€™exÃ©cuter du code Ã©crit en JavaScript sans passer par le navigateur. Si par la suite vous devez Ã©crire du code cÃ´tÃ© serveur, vous pouvez aussi le faire en JavaScript. Et surtout, Node JS permet de tÃ©lÃ©charger facilement des librairies et dÃ©ployer encore plus facilement notre application pour la **mettre en production** en utilisant quelques lignes de commande.

![](media/logo_node_js.png){fig-alt="Logo Node JS" fig-align="center" width="300"}

## Un serveur pour mon appli web

Vous vous souvenez sÃ»rement du premier cours de Leaflet.

![](media/diapo_mickael_shocked.png){fig-alt="Diapo Leaflet \"on va tricher\"" fig-align="center" width="536"}

## Un serveur pour mon appli web

Vous avez "trichÃ©" pour Ã©viter dâ€™avoir Ã  utiliser un serveur. Mais maintenant, Ã§a ne vous fait plus peur. AprÃ¨s tout, on a bien utilisÃ© un serveur carto la derniÃ¨re fois et tout le monde a survÃ©cu. Maintenant, on va pouvoir Ã©crire une application web plus complexe, bien la structurer grÃ¢ce Ã  Node JS, et la servir sur un **serveur web**.

![](media/diapo_mickael_server.png){fig-alt="Diapo Leaflet sur lâ€™architecture serveur" fig-align="center" width="1250"}

## De quelle architecture on a besoinÂ ?

FacileÂ ! On veutÂ :

-   un **serveur webcarto** (GeoServer)

-   mais aussi un **serveur web** pour servir notre application.

Durant le premier TP, on a utilisÃ© Docker pour dÃ©ployer notre GeoServer. On peut aussi dÃ©ployer notre serveur web avec Docker. Mais Ã§a voudrait dire quâ€™Ã  chaque fois, on aurait deux containers diffÃ©rents Ã  allumer et Ã©teindre, quâ€™il faut faire attention Ã  ne pas les configurer de travers, ne pas oublier les lignes de commande quâ€™on a tapÃ©esâ€¦

![](media/logo-docker.jpg){fig-alt="Logo docker" fig-align="center" width="356"}

Heureusement, Docker dispose dâ€™un petit outil bien pratique pour gÃ©rer des architectures Ã  plusieurs containersÂ : **Docker Compose**. Sauf que pour comprendre Docker Compose, il faut comprendre Docker. Et pour comprendre Docker, il faut comprendre les Machines Virtuelles (VM).

## VMs, Docker et Docker Compose

Encore de la thÃ©orieÂ ?!

![](https://media1.tenor.com/m/N47hDzQgp5QAAAAd/jdg-bored.gif){fig-alt="Joueur du Grenier blasÃ©" fig-align="center"}

On ne va pas rentrer dans le dÃ©tail, lâ€™idÃ©e est que vous compreniez pourquoi on a utilisÃ© Docker et pas des machines virtuelles pour nos serveurs. Docker, câ€™est bien. Si vous dÃ©ployez des architectures par la suite, vous allez apprendre Ã  lâ€™aimer.

## VMs, Docker et Docker Compose

### Les Machines Virtuelles (VM)

-   Il faut voir une machine virtuelle comme un ordinateur qui serait **dÃ©matÃ©rialisÃ©** (sans composants matÃ©riels). Elle possÃ¨de un processeur, de la mÃ©moire, des espaces de stockage pour la donnÃ©e, elle peut se connecter Ã  internetâ€¦

-   Outils de crÃ©ation de machines virtuellesÂ : VirtualBox, VMWareâ€¦

*ExempleÂ : en tÃ©lÃ©chargeant VirtualBox, je peux crÃ©er une machine virtuelle Linux sur mon ordinateur Windows.*

![Source : microsoft.com](media/virtual-machine-diagram.svg){fig-alt="Diagramme Machine Virtuelle" fig-align="center"}

## VMs, Docker et Docker Compose

### Les Machines Virtuelles (VM)

Si je voulais mettre en place mon serveur sur une machine virtuelle, je devraisÂ :

-   crÃ©er la machine (avec des caractÃ©ristiques suffisantes pour faire tourner lâ€™application)

-   installer et configurer mon serveur web (Apache, Nginx, Caddy)

-   ajouter le build de mon application Node JS dans le dossier `/var/www/` de mon serveur web

-   tÃ©lÃ©charger, installer et configurer GeoServer

-   Ã©ventuellement tÃ©lÃ©charger, installer et configurer une base Postgresql avec PostGIS et la connecter au serveur

-   etc.

![](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExYm1qNGw0eHk1ZmxmNmtiaXQwenc5NDdqcDRkbTNyc3M1YmJzdXRnbCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/LgR0AnXJBrO4E/giphy.webp){fig-alt="GIF : Chat dÃ©boussolÃ©" fig-align="center" width="412"}

## VMs, Docker et Docker Compose

### Les Machines Virtuelles (VM)

Multiplier les machines virtuelles sur lâ€™hÃ´te est trÃ¨s demandeur.

-   ressources divisÃ©es entre lâ€™hÃ´te et les machines

-   autant dâ€™OS Ã  faire tourner que de machines

-   chaque machine = plusieurs Go dâ€™espace

Câ€™est aussi **difficile Ã  maintenir** - il faut garder tous les OS Ã  jour, etc.

**Mais nous, on aime la simplicitÃ© et Ã©viter de consommer plein de mÃ©moire "pour rien".**

## VMs, Docker et Docker Compose

### Docker

-   Docker permet de faire tourner ce quâ€™on appelle des **containers.**

-   Les containers sont rÃ©duits au **minimum nÃ©cessaire** pour faire tourner des services (un serveur, une base de donnÃ©es, â€¦).

-   Autre outil de containerisationÂ : Podman

![Source : microsoft.com](media/container-diagram.svg){fig-alt="SchÃ©ma containers" fig-align="center"}

## VMs, Docker et Docker Compose

### Docker Compose

-   Sorti en 2013, **Docker Compose** permet de gÃ©rer des applications multi-containers.

-   Pour cela, on va rÃ©diger un fichier de type `docker-compose.yml` qui va agir comme une "recette" pour permettre Ã  Docker de crÃ©er et connecter lâ€™ensemble des containers dont on a besoin.

------------------------------------------------------------------------

Courage, on touche Ã  la fin de ce cours. On fait juste ensemble un tour du `docker-compose.yml` du TP et vous allez pouvoir commencer Ã  manipuler.

![](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExbnBiZHgwZ2t3M281cnFnYWtoZXBmdGxzMW1sM2J6MnFkemdseHRmNiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/fXzA0KYfjTPjWLzmPj/giphy.webp){fig-alt="GIF : Rick et Morty paniquent, la suite" fig-align="center" width="320"}

## Notre Docker Compose

Explications sur le contenuÂ :

``` {.yaml code-line-numbers="|1|3,15|3|4|5|6,7,8,9|10,11|12,13|15|16|17|18,19|20,21,22"}
services:

  geoserver:
    container_name: geonum_geoserver
    image: docker.osgeo.org/geoserver:2.26.0
    environment:
      - RUN_UNPRIVILEGED=true
      - CHANGE_OWNERSHIP_ON_FOLDERS="/opt /opt/geoserver_data/ /mnt/geoserver_geodata"
      - CORS_ENABLED=true
    ports:
      - "8080:8080"
    volumes:
      - $PWD/geoserver/opt:/opt/geoserver_data
  
  web:
    container_name: geonum_web
    image: caddy:latest
    ports:
      - "80:80"
    volumes:
      - $PWD/Caddyfile:/etc/caddy/Caddyfile
      - $PWD/app/dist/:/srv
```

## Ã€ vous !

Commencez le TP "dÃ©marrage de la stack" pour mettre en place vos containersÂ ! Ensuite, on pourra se pencher un peu plus sur le cas dâ€™OpenLayers.
