---
title: "Introduction Ã  OpenLayers"
author: "Marie Gradeler"
date: 27 Nov 2024
format: 
  revealjs: 
    theme: [default, ../../styles/slides.scss]
    transition: slide
    controls: true
    controls-layout: edges
    footer: "Formation WebCarto GeoNum 2024 -2025"
    logo: ../../static/logos/logo-geonum.webp
---

## Sommaire

-   Se familiariser avec le code de lâ€™application

-   Les ressources OpenLayers

-   Conseils pour coder

-   On ajoute notre premiÃ¨re couche ensemble

## Se familiariser avec le code de lâ€™application

Node JS crÃ©e beaucoup dâ€™Ã©lÃ©ments mais voici ceux quâ€™on utiliseraÂ :

-   `index.html`

-   `style.css`

-   `main.js`

Deux autres explications Ã  titre dâ€™informationÂ :

-   `node_modules/` contient notamment le code des librairies installÃ©es, **câ€™est ici que vit le code source dâ€™OpenLayers**

-   `dist/` contient lâ€™output du build du site, câ€™est les fichiers qui sont prÃªts Ã  Ãªtre servis par le serveur (pour nous, Caddy) pour mettre notre site en **production**

## Se familiariser avec le code de lâ€™application

### index.html

``` {.html code-line-numbers="|1|2,13|3,8|4,5,6,7|9,12|10|11"}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/x-icon" href="https://openlayers.org/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Using OpenLayers with Vite</title>
  </head>
  <body>
    <div id="map"></div>
    <script type="module" src="./main.js"></script>
  </body>
</html>
```

## Se familiariser avec le code de lâ€™application

### index.html

Une rÃ©fÃ©rence pratique pour les balises htmlÂ : [W3schools.com](https://www.w3schools.com/tags/ref_byfunc.asp)

## Se familiariser avec le code de lâ€™application

### style.css

``` {.css code-line-numbers="|1|3-6|7-12"}
@import "node_modules/ol/ol.css";

html, body {
  margin: 0;
  height: 100%;
}
#map {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 100%;
}
```

## Se familiariser avec le code de lâ€™application

### style.css

Des rÃ©fÃ©rences pratiques pour Ã©crire du CSSÂ :

-   [cssreference.io](https://cssreference.io/) pour la plupart des propriÃ©tÃ©s CSS

-   [W3schools.com](https://www.w3schools.com/cssref/css_selectors.php) pour les sÃ©lÃ©cteurs

-   dâ€™excellents guides sur css-tricks.com pour utiliser [grid](https://css-tricks.com/snippets/css/complete-guide-grid/) ou [flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)

## Se familiariser avec le code de lâ€™application

### main.js

``` {.javascript code-line-numbers="|1-4|6-17|6|7|8-12|9-10|13-16|1-17"}
import './style.css';
import {Map, View} from 'ol';
import TileLayer from 'ol/layer/Tile';
import OSM from 'ol/source/OSM';

const map = new Map({
  target: 'map',
  layers: [
    new TileLayer({
      source: new OSM()
    })
  ],
  view: new View({
    center: [0, 0],
    zoom: 2
  })
});
```

## Les ressources OpenLayers

**Dâ€™abord, la documentation.** Câ€™est la bible dâ€™OpenLayers et vous allez devoir apprendre Ã  la comprendre, au moins en partie, ou vous allez avoir beaucoup de mal Ã  comprendre ce que vous faites quand vous codez. Elle peut Ãªtre trouvÃ©e Ã  cette addresseÂ : <https://openlayers.org/en/latest/apidoc/>

. . .

**Exemple dâ€™utilisation de la documentation pour lâ€™objet `Map` qui est crÃ©Ã© dans `main.js`Â :**

Tapez "Map" et cliquez sur le premier rÃ©sultat ([lien ici](https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html)). On voit en haut de la pageÂ :

-   Comment importer cet objet `Map`

-   Une description de ce quâ€™est cet objet `Map`

-   Un exemple ("*snippet*", petit morceau de code) qui montre comment utiliser `Map`

. . .

**Quand on continue Ã  dÃ©filer vers le bas, on voit plusieurs autres sectionsÂ :**

-   La dÃ©finition de la fonction pour crÃ©er lâ€™objet `Map` et les options quâ€™il prend (`new Map(options)`)

-   Les Ã©vÃ¨nements qui peuvent Ãªtre dÃ©clenchÃ©s ("*fired*") par notre objet `Map` dans la section `Fires:`

-   Les `MÃ©thodes` de lâ€™objet `Map`, donc les fonctions qui peuvent Ãªtre dÃ©clenchÃ©es avec cet objet Map pour gÃ©nÃ©ralement le lire ou le modifier

## Les ressources OpenLayers

### Petit point UML pour mieux comprendre (jâ€™espÃ¨re)

```{mermaid}
classDiagram
    class Map{
        controls
        pixelRatio
        interactions
        keyboardEventTarget
        layers
        maxTilesLoading
        moveTolerance
        overlays
        target
        view
        +methodsâ€¦()
    }
```

OK câ€™est un peu compliquÃ©. Pour simplifier, on va prendre les Ã©lÃ©ments qui nous intÃ©ressent le plus.

## Les ressources OpenLayers

### Petit point UML pour mieux comprendre (jâ€™espÃ¨re)

::::::: columns
::: {.column width="30%"}
```{mermaid}
classDiagram
    class Map{
        target
        layers
        view
        +addLayer()
        +getlayers()
        +getView()
    }
```
:::

::::: {.column width="70%"}
**ClasseÂ :** Map

**AttributsÂ :**

::: incremental
-   `target` = lâ€™id de ma `<div>` qui va contenir ma carte

-   `layers` = les couches crÃ©Ã©es avec OpenLayers qui doivent Ãªtre ajoutÃ©es Ã  ma carte

-   `view` = les paramÃ¨tres de la vue (centre, niveau de zoom) de ma carte lorsquâ€™elle est initialisÃ©e
:::

**MÃ©thodesÂ :**

::: incremental
-   `addLayer()` = ajouter une couche crÃ©Ã©e avec OpenLayers Ã  ma carte

-   `getLayers()` = rÃ©cupÃ©rer les couches qui sont attachÃ©es Ã  ma carte

-   `getView()` = rÃ©cupÃ©rer les paramÃ¨tres de la vue actuelle (centre, niveau de zoom)
:::
:::::
:::::::

## Les ressources OpenLayers

### La galerie dâ€™exemples

Pour crÃ©er une carte sous OpenLayers, le point dâ€™entrÃ©e principal est la [galerie dâ€™exemples](https://openlayers.org/en/latest/examples/). **Je vous conseille vivement de toujours commencer par lÃ ** avant dâ€™aller voir dâ€™autres ressources comme StackOverflow, etc. comme ce sont les exemples officiels qui sont maintenus Ã  jour et respectent les bonnes pratiques dâ€™utilisation du code OpenLayers.

Par exemple, si vous souhaitez ajouter un flux WMS Ã  votre carte, basez-vous sur le code de lâ€™exemple [Single Image WMS](https://openlayers.org/en/latest/examples/wms-image.html).

![](media/example_openlayers.png){fig-alt="Exemple dâ€™OpenLayers pour importer une couche WMS" fig-align="center"}

## Conseils pour coder

::: incremental
-   Utilisez des `console.log()` Ã  outrance pour vÃ©rifier quâ€™une fonction a bien Ã©tÃ© appelÃ©e, quâ€™une variable a bien Ã©tÃ© lue, etc.

-   Copiez le code des exemples OpenLayers et essayez de le changer petit Ã  petit pour lâ€™adapter Ã  votre code.

-   Quand vous voulez ajouter de nouveaux Ã©lÃ©ments, allez-y petit Ã  petit et vÃ©rifiez Ã  chaque Ã©tape que tout fonctionne, Ã§a permettra plus facilement de retrouver les bugs.

-   Une des premiÃ¨res choses Ã  vÃ©rifier quand le code ne fonctionne pas est le **nom des variables**. Parfois on oublie un "s", parfois on a ajoutÃ© une majusculeâ€¦

-   **COMMENTEZ VOTRE CODEÂ !** Non seulement ce sera pris en compte dans lâ€™Ã©valuation, mais surtout vous allez galÃ©rer Ã  comprendre votre code en revenant dessus dans quelques mois et/ou les personnes avec qui vous allez travailler vont aussi mettre du temps Ã  vous comprendre.
:::

## On ajoute notre premiÃ¨re couche ensemble

Maintenant, on va ajouter notre premiÃ¨re couche WMS ensemble.

-   Ouvrez votre projet dans VSCode (ou votre Ã©diteur prÃ©fÃ©rÃ©) si ce nâ€™est pas dÃ©jÃ  fait

-   Si vous aviez arrÃªtÃ© votre serveur node, ouvrez un terminal dans votre dossier `app` et tapez `npm start` puis allez sur le lien localhost qu vous est donnÃ© pour rouvrir votre carte

. . .

**OpenLayers câ€™est comme toutÂ : avant de pouvoir partir en vrille et crÃ©er vos meilleures applications, il faut bien comprendre les bases.**

Donc au lieu de connecter notre couche WMS Ã  lâ€™aveugle, on va chercher Ã  comprendre comment câ€™est fait. Ci-dessous, un exemple dâ€™Ã©tudiants qui ont bien Ã©tudiÃ© les bases pour comprendre ce quâ€™ils font.

![](https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExbjJwdmdrbTA5bDc2YWVreDFhdjA5eGNkbDA4YXRyN2NnY3Nvdm5uMCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/B00q7QKzzRQ0qPZ7Pn/giphy.webp){fig-alt="GIF : Arcane : Jayce et Victor font de la science" fig-align="center" width="669"}

## On ajoute notre premiÃ¨re couche ensemble

ðŸ¤” Quâ€™est-ce qui est diffÃ©rent dans `index.html`Â ?

. . .

-   le style nâ€™est pas dans `style.css` mais dans une balise de `<style>`. Nous on a dÃ©jÃ  un fichier de style qui fonctionne trÃ¨s bien et la carte en plein Ã©cran nous plait, on ne change rien.

. . .

-   la balise `<div id="map">` a aussi une classe de style `class = "map"`. Cela permet dâ€™appliquer le mÃªme style Ã  toutes les cartes avec la classe `map`. Nous on a une seule carte dans notre application, donc on sâ€™en moque.

. . .

En gros, on nâ€™a rien Ã  modifier dans `index.html` ni dans le fichier de style `style.css`. On peut passer au gros morceauÂ : le fichier de script `main.js`.

## On ajoute notre premiÃ¨re couche ensemble

ðŸ¤” Quâ€™est-ce qui est diffÃ©rent dans `main.js`Â ?

. . .

ðŸ‘† Mon conseilÂ : au dÃ©but, ignorez toute la section **import** qui peut sembler un peu floue et concentrer vous sur les **variables** qui sont dÃ©finies dans le code, puis sur les **objets OpenLayers**.

. . .

::::: columns
::: {.column width="50%"}
Notre codeÂ :

``` javascript
import './style.css';
import {Map, View} from 'ol';
import TileLayer from 'ol/layer/Tile';
import OSM from 'ol/source/OSM';

const map = new Map({
  target: 'map',
  layers: [
    new TileLayer({
      source: new OSM()
    })
  ],
  view: new View({
    center: [0, 0],
    zoom: 2
  })
});
```
:::

::: {.column width="50%"}
Le code de lâ€™exempleÂ :

``` javascript
import ImageWMS from 'ol/source/ImageWMS.js';
import Map from 'ol/Map.js';
import OSM from 'ol/source/OSM.js';
import View from 'ol/View.js';
import {Image as ImageLayer, Tile as TileLayer} from 'ol/layer.js';

const layers = [
  new TileLayer({
    source: new OSM(),
  }),
  new ImageLayer({
    extent: [-13884991, 2870341, -7455066, 6338219],
    source: new ImageWMS({
      url: 'https://ahocevar.com/geoserver/wms',
      params: {'LAYERS': 'topp:states'},
      ratio: 1,
      serverType: 'geoserver',
    }),
  }),
];
const map = new Map({
  layers: layers,
  target: 'map',
  view: new View({
    center: [-10997148, 4569099],
    zoom: 4,
  }),
});
```
:::
:::::

## On ajoute notre premiÃ¨re couche ensemble

::::: columns
::: {.column width="50%"}
Notre codeÂ :

``` {.javascript code-line-numbers="6-17"}
import './style.css';
import {Map, View} from 'ol';
import TileLayer from 'ol/layer/Tile';
import OSM from 'ol/source/OSM';

const map = new Map({
  target: 'map',
  layers: [
    new TileLayer({
      source: new OSM()
    })
  ],
  view: new View({
    center: [0, 0],
    zoom: 2
  })
});
```
:::

::: {.column width="50%"}
Le code de lâ€™exempleÂ :

``` {.javascript code-line-numbers="7-28|21-28"}
import ImageWMS from 'ol/source/ImageWMS.js';
import Map from 'ol/Map.js';
import OSM from 'ol/source/OSM.js';
import View from 'ol/View.js';
import {Image as ImageLayer, Tile as TileLayer} from 'ol/layer.js';

const layers = [
  new TileLayer({
    source: new OSM(),
  }),
  new ImageLayer({
    extent: [-13884991, 2870341, -7455066, 6338219],
    source: new ImageWMS({
      url: 'https://ahocevar.com/geoserver/wms',
      params: {'LAYERS': 'topp:states'},
      ratio: 1,
      serverType: 'geoserver',
    }),
  }),
];
const map = new Map({
  layers: layers,
  target: 'map',
  view: new View({
    center: [-10997148, 4569099],
    zoom: 4,
  }),
});
```
:::
:::::

## On ajoute notre premiÃ¨re couche ensemble

::::: columns
::: {.column width="50%"}
Notre codeÂ :

``` {.javascript code-line-numbers="7"}
import './style.css';
import {Map, View} from 'ol';
import TileLayer from 'ol/layer/Tile';
import OSM from 'ol/source/OSM';

const map = new Map({
  target: 'map',
  layers: [
    new TileLayer({
      source: new OSM()
    })
  ],
  view: new View({
    center: [0, 0],
    zoom: 2
  })
});
```
:::

::: {.column width="50%"}
Le code de lâ€™exempleÂ :

``` {.javascript code-line-numbers="23"}
import ImageWMS from 'ol/source/ImageWMS.js';
import Map from 'ol/Map.js';
import OSM from 'ol/source/OSM.js';
import View from 'ol/View.js';
import {Image as ImageLayer, Tile as TileLayer} from 'ol/layer.js';

const layers = [
  new TileLayer({
    source: new OSM(),
  }),
  new ImageLayer({
    extent: [-13884991, 2870341, -7455066, 6338219],
    source: new ImageWMS({
      url: 'https://ahocevar.com/geoserver/wms',
      params: {'LAYERS': 'topp:states'},
      ratio: 1,
      serverType: 'geoserver',
    }),
  }),
];
const map = new Map({
  layers: layers,
  target: 'map',
  view: new View({
    center: [-10997148, 4569099],
    zoom: 4,
  }),
});
```
:::
:::::

## On ajoute notre premiÃ¨re couche ensemble

::::: columns
::: {.column width="50%"}
Notre codeÂ :

``` {.javascript code-line-numbers="13-16"}
import './style.css';
import {Map, View} from 'ol';
import TileLayer from 'ol/layer/Tile';
import OSM from 'ol/source/OSM';

const map = new Map({
  target: 'map',
  layers: [
    new TileLayer({
      source: new OSM()
    })
  ],
  view: new View({
    center: [0, 0],
    zoom: 2
  })
});
```
:::

::: {.column width="50%"}
Le code de lâ€™exempleÂ :

``` {.javascript code-line-numbers="24-27"}
import ImageWMS from 'ol/source/ImageWMS.js';
import Map from 'ol/Map.js';
import OSM from 'ol/source/OSM.js';
import View from 'ol/View.js';
import {Image as ImageLayer, Tile as TileLayer} from 'ol/layer.js';

const layers = [
  new TileLayer({
    source: new OSM(),
  }),
  new ImageLayer({
    extent: [-13884991, 2870341, -7455066, 6338219],
    source: new ImageWMS({
      url: 'https://ahocevar.com/geoserver/wms',
      params: {'LAYERS': 'topp:states'},
      ratio: 1,
      serverType: 'geoserver',
    }),
  }),
];
const map = new Map({
  layers: layers,
  target: 'map',
  view: new View({
    center: [-10997148, 4569099],
    zoom: 4,
  }),
});
```
:::
:::::

## On ajoute notre premiÃ¨re couche ensemble

::::: columns
::: {.column width="50%"}
Notre codeÂ :

``` {.javascript code-line-numbers="8-12"}
import './style.css';
import {Map, View} from 'ol';
import TileLayer from 'ol/layer/Tile';
import OSM from 'ol/source/OSM';

const map = new Map({
  target: 'map',
  layers: [
    new TileLayer({
      source: new OSM()
    })
  ],
  view: new View({
    center: [0, 0],
    zoom: 2
  })
});
```
:::

::: {.column width="50%"}
Le code de lâ€™exempleÂ :

``` {.javascript code-line-numbers="22|22,7-20"}
import ImageWMS from 'ol/source/ImageWMS.js';
import Map from 'ol/Map.js';
import OSM from 'ol/source/OSM.js';
import View from 'ol/View.js';
import {Image as ImageLayer, Tile as TileLayer} from 'ol/layer.js';

const layers = [
  new TileLayer({
    source: new OSM(),
  }),
  new ImageLayer({
    extent: [-13884991, 2870341, -7455066, 6338219],
    source: new ImageWMS({
      url: 'https://ahocevar.com/geoserver/wms',
      params: {'LAYERS': 'topp:states'},
      ratio: 1,
      serverType: 'geoserver',
    }),
  }),
];
const map = new Map({
  layers: layers,
  target: 'map',
  view: new View({
    center: [-10997148, 4569099],
    zoom: 4,
  }),
});
```
:::
:::::

## On ajoute notre premiÃ¨re couche ensemble

Le code de lâ€™exemple :

``` {.javascript code-line-numbers="7-28|11-19|13-18"}
import ImageWMS from 'ol/source/ImageWMS.js';
import Map from 'ol/Map.js';
import OSM from 'ol/source/OSM.js';
import View from 'ol/View.js';
import {Image as ImageLayer, Tile as TileLayer} from 'ol/layer.js';

const layers = [
  new TileLayer({
    source: new OSM(),
  }),
  new ImageLayer({
    extent: [-13884991, 2870341, -7455066, 6338219],
    source: new ImageWMS({
      url: 'https://ahocevar.com/geoserver/wms',
      params: {'LAYERS': 'topp:states'},
      ratio: 1,
      serverType: 'geoserver',
    }),
  }),
];
const map = new Map({
  layers: layers,
  target: 'map',
  view: new View({
    center: [-10997148, 4569099],
    zoom: 4,
  }),
});
```

## On ajoute notre premiÃ¨re couche ensemble

De quoi jâ€™ai besoin pour ajouter une couche WMS Ã  ma carteÂ ?

::: incremental
-   Il nous faut une source pour le flux WMS quâ€™on crÃ©e avec lâ€™objet `ImageWMS` ([documentation](https://openlayers.org/en/latest/apidoc/module-ol_source_ImageWMS-ImageWMS.html))

-   Il nous faut un objet `ImageLayer` pour crÃ©er notre couche Ã  partir de notre source

-   Il nous faut un objet `Map` (dÃ©jÃ  crÃ©Ã© dans notre cas) auquel ajouter la couche
:::

. . .

Ma proposition de code pour crÃ©er une couche (en retirant les Ã©lÃ©ments superflus pour simplifier)Â :

``` javascript
const ma_source = new ImageWMS({
  url: '<lien_vers_mon_serveur>',
  params: {'LAYERS': '<espace>:<couche>'},
  serverType: 'geoserver',
});

const ma_couche = new ImageLayer({
  source: ma_source,
});
```

. . .

On pourrait aussi lâ€™Ã©crire en imbriquant tout comme dans lâ€™exemple, mais je prÃ©fÃ¨re sÃ©parer les Ã©lÃ©ments, je trouve Ã§a moins confus (surtout quand on apprend).

``` javascript
const ma_couche = new ImageLayer({
  source: new ImageWMS({
    url: '<lien_vers_mon_serveur>',
    params: {'LAYERS': '<espace>:<couche>'},
    serverType: 'geoserver',
  }),
});
```

## On ajoute notre premiÃ¨re couche ensemble

Il nous manque un dernier dÃ©tailÂ : les `imports`. Si vous utilisez le code tel quel, vous allez avoir des messages dâ€™erreur indiquant que les fonctions ne sont pas trouvÃ©es. Vous pouvez trouver les imports de trois maniÃ¨resÂ :

-   vous regardez les imports dans lâ€™exemple OpenLayers et vous rÃ©cupÃ©rez ceux dont vous avez besoin ([lien](https://openlayers.org/en/latest/examples/wms-image.html))

-   vous allez voir la documentation de `ImageWMS` par exemple et la premiÃ¨re ligne vous indique comment importer le module dans votre code ([lien](https://openlayers.org/en/latest/apidoc/module-ol_source_ImageWMS-ImageWMS.html))

-   si votre Ã©diteur de code est bien fichu, il peut lui-mÃªme ajouter un `import` quand vous appelez un constructeur ou une mÃ©thode dans votre code

ðŸ‘† Dâ€™ailleurs, nâ€™oubliez pas que les `import` **doivent toujours Ãªtre dÃ©clarÃ©s tout en haut du documentÂ !**

## On ajoute notre premiÃ¨re couche ensemble

Voici mon rÃ©sultat pour importer la couche de lâ€™exemple dâ€™OpenLayersÂ :

``` javascript
import './style.css';
import {Map, View} from 'ol';
import { ImageWMS } from 'ol/source';
import TileLayer from 'ol/layer/Tile';
import ImageLayer from 'ol/layer/Image';
import OSM from 'ol/source/OSM';

const couche_osm = new TileLayer({ source: new OSM() });

const ma_source = new ImageWMS({
  url: 'https://ahocevar.com/geoserver/wms',
  params: { 'LAYERS' : 'topp:states' },
  serverType: 'geoserver',
});

const ma_couche = new ImageLayer({
  source: ma_source,
});

const map = new Map({
  target: 'map',
  layers: [ couche_osm, ma_couche ],
  view: new View({
    center: [0, 0],
    zoom: 2
  })
});
```

## Ã€ vousÂ !

Vous allez pouvoir commencer le TP suivant pour commencer Ã  ajouter vos couches dans votre application OpenLayers.

Câ€™est partiÂ !

![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExcjc5bGExdHQyaHJqN3E3ZXN4M3J6cWdpZ3EwZ3ZpOHdxcDlkc3psMyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/HVr4gFHYIqeti/giphy.webp){fig-alt="GIF : Bilbo part pour une aventureÂ !" fig-align="center"}
