{"title":"Serveurs cartographiques","markdown":{"yaml":{"title":"Serveurs cartographiques","subtitle":"Introduction aux serveurs cartographiques et à l’utilisation de GeoServer."},"headingText":"Objectifs","containsRefs":false,"markdown":"\n\n\n-   Comprendre ce qu’est un serveur cartographique et ce que sont les flux WMS, WFS, etc.\n\n-   Connaître les principaux serveurs cartographiques avec un focus sur GeoServer, un serveur cartographique Open-Source.\n\n-   Apprendre à déployer une instance de GeoServer à l’aide de Docker.\n\n-   Publier des couches avec GeoServer et les styliser en passant par QGIS.\n\n-   Lire les flux WMS de mon GeoServer dans une application OpenLayers basique.\n\n-   Être capable de déterminer dans quelles situations on a besoin d’un serveur cartographique.\n\n## Cours\n\n[Slides : Serveurs Cartographiques](./slides_cours_1.qmd){target=\"_blank\"}\n\n## ️TP - Prise en main de GeoServer\n\n### Déploiement de GeoServer à l’aide de Docker\n\n[Documentation GeoServer](https://docs.geoserver.org/main/en/user/installation/docker.html) - [Dépôt de l’image Docker](https://github.com/geoserver/docker)\n\n::: callout-important\nCe TP suppose que Docker est installé sur la machine. Il a aussi été écrit pour une machine Linux, certains chemins et lignes de commande peuvent donc être différents sur une machine Windows ou Mac.\n:::\n\nUne fois que Docker est installé, lancez la commande suivante pour télécharger une image de GeoServer en version 2.26.0 :\n\n``` bash\ndocker pull docker.osgeo.org/geoserver:2.26.0\n```\n\nPuis, pour construire un container à partir de l’image de GeoServer :\n\n``` bash\ndocker run -it -p 80:8080 docker.osgeo.org/geoserver:2.26.0\n```\n\nSi vous n’avez pas eu de message d’erreur, rendez-vous sur <http://localhost/geoserver> et connectez-vous avec l’identifiant `admin` et le mot de passe `geoserver`. Si l’authentification a fonctionné, félicitations, vous avez réussi à faire tourner un container avec GeoServer !\n\n::: {.callout-note collapse=\"true\"}\n## Attends, attends… des containers, des images ? Hein ?\n\n![](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2xjZWIxY3gxeXZlZXdqeGZ1b3d6ZDRoaWQ3amtjMmd1dmcxdGVndSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WRQBXSCnEFJIuxktnw/giphy.webp){fig-alt=\"GIF: Confused math\" fig-align=\"center\"}\n\nPas de panique ! On n’a pas besoin de savoir exactement comment fonctionne Docker pour ce TP. Si on veut simplifier :\n\n-   Docker permet de faire tourner des **services** dans des **containers** créés à partir d’**images**.\n\n-   Une **image** est une recette à suivre pour créer mon container. Elle demande à Docker de créer un container basé sur Debian, d’y installer GeoServer ou bien une base PostgreSQL avec l’extension postGIS, etc.\n\n-   Un **container** est le produit d’une image. C’est un peu le plat cuisiné à partir de la recette. C’est à l’intérieur du container que tourne mon **service** comme ma base de données ou mon serveur web. On peut connecter plusieurs containers entre eux, pratique si on veut un site web et une base de données qui fonctionnent ensemble !\n\n-   Un **service** est généralement une base de données (ex. PostgreSQL), un serveur de site web (ex. Apache), un serveur cartographique (ex. GeoServer), etc. Comme les bonnes pratiques demandent d’avoir un seul service par container, on va parler du \"container GeoServer\" pour dire \"le container qui contient mon service GeoServer\", ça va plus vite.\n\nSi ce n’est encore pas clair et que ça vous gêne pour la compréhension de la suite du TP, hop, on lève la main et on demande des explications, je suis là pour ça ! Et si vous voulez aller plus loin, rendez-vous sur la [documentation officelle de Docker](https://docs.docker.com/).\n:::\n\nPour vérifier que tout fonctionne, on va faire une petite manip rapide.\n\n-   En haut à droite de l’écran, si ce n’est pas déjà le cas, sélectionnez le langage \"fr\" pour passer l’interface en français.\n-   Allez dans \"Espaces de travail\" (menu à gauche de l’écran) et cliquez sur le bouton \"Ajouter un nouvel espace de travail\".\n-   Appelez-le \"mon_espace\" et donnez lui un URI `mon_espace`.\n-   Vérfiez qu’il apparaît bien dans la liste de vos espaces (normalement, au-dessus de \"ne\").\n\nEnsuite, on va arrêter notre container Docker. Commencez par utiliser la commande suivante :\n\n``` bash\ndocker ps\n```\n\nVous devriez voir apparaître une ligne avec l’ID de votre container dans la colonne CONTAINER ID, l’image utilisée pour le construire dans la colonne IMAGE, d’autres informations qui ne nous servent pas dans ce TP et son nom dans la colonne NAME. La commande `docker ps` permet de lister les containers actifs en ce moment. On souhaite arrêter notre container avec la commande `docker stop <container_name>`. Pour cela, il faut utiliser le nom du container à la place de `<container_name>`. Par exemple, voici les informations de mon container :\n\n```         \nCONTAINER ID   IMAGE                               COMMAND                  CREATED         STATUS                            PORTS                                     NAMES\n0a885cadf11d   docker.osgeo.org/geoserver:2.26.0   \"bash /opt/startup.sh\"   8 seconds ago   Up 7 seconds (health: starting)   0.0.0.0:80->8080/tcp, [::]:80->8080/tcp   charming_pare\n```\n\nLe nom de mon container est donc `charming_pare`. Pour arrêter mon container, je dois taper la commande suivante :\n\n``` bash\ndocker stop charming_pare\n```\n\n::: callout-tip\nQuand on tape des lignes de commande en bash, utilisez la touche `tab` pour auto-compléter la commande. Par exemple, ici, j’ai seulement tapé `docker stop ch` puis appuyé sur tab qui a complété le nom de mon container. Pratique, non ? N’hésitez pas à en abuser. Si l’auto-complete ne fonctionne pas, c’est qu’il ne trouve rien OU plusieurs résultats. Dans ce cas, continuez à écrire la commande à la main et réessayez.\n:::\n\nUtilisez à nouveau la commande `docker ps` pour vérifier que ce container n’apparaît plus dans la liste. Normalement, si vous actualisez la page GeoServer, vous devriez avoir une erreur du type \"localhost refused to connect\".\n\n**Alors, c’est bien sympa tout ça, mais en l’état, on ne va pas pouvoir ajouter de données dans notre container.** Il faudrait pouvoir accéder au dossier `/data` de GeoServer. Heureusement, pour nous simplifier la vie, on peut utiliser Docker pour \"connecter\" deux dossiers en eux (monter, *mount* en anglais). Pour ça, il faut créer sur notre ordinateur un nouveau dossier dans lequel on mettra tout ce qu’on veut retrouver dans le `/data` de notre GeoServer. Promis, c’est la dernière étape aussi technique, ensuite je me détends et j’arrête de vous faire taper autant de lignes de commande.\n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExYmtrc2k0ZGljMG0yZm41M3Nhd2Zlb2FidndvcWVtbDRhOTUwZ3cxdiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/7hJZcKzjIufeOmqKSj/giphy.webp){fig-alt=\"GIF: Code code code\" fig-align=\"center\"}\n\nD’abord, on supprime notre container. On va en créer un nouveau dans les étapes suivantes.\n\n``` bash\ndocker rm <nom_du_container>\n```\n\nEnsuite, on va créer un dossier à monter sur le `/data` de notre container.\n\n-   Allez dans Documents et créer un nouveau dossier \"GeoServer\".\n\n-   Copiez le chemin ABSOLU vers ce dossier. Par exemple, chez moi (Ubuntu), ça donne ça : `/home/marie/Documents/GeoServer`\n\n-   Remplacez `\"/absolute/path/on/host\"` dans la commande suivante et copiez-collez la quelque part, on ne sait jamais.\n\n``` bash\ndocker run -it -p 80:8080 \\\n  --mount src=\"/absolute/path/on/host\",target=/opt/geoserver_data/,type=bind \\\n  docker.osgeo.org/geoserver:2.26.0\n```\n\n-   Exécutez la ligne de commande.\n\nMaintenant, on va ajouter notre jeu de données `land_matrix_mines` à notre dossier `/data`.\n\n-   Téléchargez le jeu de données [land_matrix_mines](/data/land_matrix/land_matrix_mines.gpkg).\n\n-   Dans l’explorateur de fichiers de votre ordinateur, ouvrez votre dossier GeoServer. Normalement, vous auriez du voir apparaître plusieurs nouveaux dossiers. Allez dans `/data` et créez un nouveau dossier `geopackage`.\n\n-   Glissez le fichier `land_matrix_mines.gpkg` dans le dossier `geopackage`.\n\n::: {.callout-important collapse=\"true\"}\n## Je ne peux pas créer de nouveau dossier / déplacer mon fichier !\n\nSi vous ne pouvez pas créer de nouveau dossier, c’est que vous ne disposez pas des permissions suffisantes. Dans mon cas (sur Ubuntu), tous les dossiers appartenaient à l’utilisateur et au groupe `root`. Il faut utiliser la commande `chown` :\n\n``` bash\nsudo chown -R <user>:<group> /chemin/vers/mon/dossier\n```\n\nPour changer les droits de mon dossier \\`/home/marie/Documents/GeoServer\\` j’ai donc tapé :\n\n``` bash\nsudo chown -R marie:marie /home/marie/Documents/GeoServer\n```\n\nSi ça ne fonctionne pas, ne restez pas bloqués et appelez-moi, on règle ça ensemble.\n:::\n\nC’est bon, ça fonctionne ? Parfait ! Les règles pour arrêter et démarrer son container restent les mêmes. Tout ce qu’il faut retenir, c’est qu’il ne faut pas supprimer ou déplacer votre dossier GeoServer sous peine de tout casser. Pour le reste, tout devrait fonctionner tranquillement.\n\n::: {.callout-tip collapse=\"true\"}\n## Rappel des commandes principales\n\n``` bash\n# Lister les containers actifs\ndocker ps\n\n# Lister tous les containers, même arrêtés\ndocker ps -a\n\n# Démarrer mon container\ndocker start <nom_du_container>\n\n# Arrêter mon container\ndocker stop <nom_du_container>\n\n# /!\\ Supprimer mon container\ndocker rm <nom_du_container>\n```\n:::\n\nVous avez survécu au déploiement du GeoServer, bien joué ! Prenez un moment pour souffler, allez vous chercher un café. La suite sera beaucoup moins prise de tête, c’est promis !\n\n![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmJ0amd0cmRoY2dyZXZmYndiNzd3MWM5amEybTY0bW92ZXkxaXo3ayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ceeFbVxiZzMBi/giphy.webp){fig-alt=\"GIF: Pause café\" fig-align=\"center\"}\n\n### Espaces de travail, Entrepôts et Couches\n\nCréer un **espace de travail**, c’est facile, on vient de le faire. Maintenant, on va créer un nouveau dépôt par défaut qu’on appellera `land_matrix` et dans lequel on ajoutera notre geopackage.\n\n-   Allez dans \"Espaces de travail\" et cliquez sur \"Ajouter un nouvel espace de travail\".\n\n-   Nommez l’espace de travail \"land_matrix\" et donnez lui l’URI \"land_matrix\".\n\n-   Cochez \"Espace de travail par défaut\".\n\n-   Ciquez sur \"Sauvegarder\".\n\nSi tout va bien, on voit maintenant notre espace \"land_matrix\" dans la liste. On va pouvoir ajouter un **entrepôt** de données dans notre espace.\n\n-   Allez dans \"Entrepôts\" et cliquez sur \"Ajouter un nouvel entrepôt\". Vous allez voir une liste de tous les types d’entrepôts de données qui peuvent être ajoutés à votre espace de travail, par exempe du GeoPackage, une base PostGIS, un Shapefile ou encore un flux WMS distant.\n\n-   Sélectionnez \"GeoPackage\".\n\n-   Nommez la source de données \"land_matrix_mines\" et ajoutez une petite description, par exemple \"Transactions minières de la Land Matrix, 2024\".\n\n-   Dans \"**Paramètres de connexion**\" cliquez sur \"Parcourir…\" à droite de \"database \\*\".\n\n-   Allez dans `data/geopackage/` et cliquez sur le jeu de données `land_matrix_mines.gpkg`.\n\n-   Videz le champ \"passwd\".\n\n-   Cliquez sur \"Sauvegarder\".\n\nUne fois de retour sur la page \"Entrepôts\", vous devriez voir votre entrepôt \"land_matrix_mines\" associé à l’espace de travail \"land_matrix\". On avance ! Maintenant, on veut publier et lire des **couches**.\n\n-   Allez dans \"Couches\" et cliquez sur \"Ajouter une nouvelle couche\".\n\n-   Sélectionnez \"land_matrix:land_matrix_mines\". Vous devriez voir apparaître une liste de couches.\n\n-   Cliquez sur \"Publier\" à droite de la couche \"deals\".\n\nL’onglet de publication de couche permet de configurer la couche et d’y ajouter de la métadonnée. Dans ce TP, on se concentrera sur les informations \"cruciales\" pour définir une couche, mais vous pourrez toujours allez plus loin en utilisant la [documentation GeoServer sur les couches](https://docs.geoserver.org/latest/en/user/data/webadmin/layers.html).\n\nLes trois choses à faire absolument à chaque fois dans l’onglet données sont :\n\n-   Renseigner les informations dans \"**Informations de base sur les donneés**\" comme le nom de la couche et un résumé. N’oubliez pas de laisser \"Activé\" et \"Publié\" cochés pour rendre la couche accessible depuis l’extérieur.\n\n-   Vérifier le \"**Système de Référence de Coordonnées (SRC)**\" qui doit être pré-rempli en EPSG:4326 dans notre cas. Il correspond à la projection WGS84 utilisée dans la grande majorité des cas en cartographie web.\n\n-   Définir les \"**Emprises**\" qui se calculent automatiquement sur GeoServer en cliquant sur \"Calculer depuis les limites du SRS\" et \"Calculées sur les emprises natives\".\n\nCliquez ensuite sur \"Appliquer\" pour sauvegarder vos changements et scrollez en haut de la page pour accéder à l’onglet \"Publication\".\n\n-   Dans \"**Paramètres de couche**\", cochez Interrogeable et vérifiez que le style par défaut est bien \"point\".\n\nCliquez sur \"Sauvegarder\". La couche devrait maintenant apparaître au sommet du tableau. Cliquez simplement sur le nom de la couche (ici \"deals\") pour la paramétrer à nouveau si besoin. Pour vérifier que tout a fonctionné, on peut prévisualiser la couche directement depuis GeoServer.\n\n-   Allez dans \"Prévisualisation de la Couche\" (menu à gauche de l’écran).\n\n-   Sur la ligne de la couche \"deals\", sélectionnez \"OpenLayers\".\n\nVous devriez voir apparaître quelque chose comme ça, avec des informations supplémentaires si vous cliquez sur des points (possible car notre couche est interrogeable) :\n\n![](/static/captures/geonum_geoserver_layer_preview.png){fig-alt=\"Prévisualisation de la couche deals dans GeoServer\" fig-align=\"center\"}\n\nSi c’est bon, bravo, ça a fonctionné ! Si vous voyez des artefacts autour des points, c’est normal. Ce que vous regardez, ce ne sont pas des polygones mais une image produite à partir de notre couche et transmise comme un flux WMS par notre serveur. L’intérêt, c’est qu’on peut afficher rapidement des couches très lourdes de cette manière, là où un GeoJSON commencerait à ramer. Et on peut toujours zoomer et cliquer sur un point pour l’interroger. C’est super pratique ! Ce flux WMS est récupéré et lu par une petite appli OpenLayers, c’est comme ça que vous êtes capable de voir la couche sur votre page web (vous sentez venir la transition vers les prochains cours, là ?).\n\nBon, super, on a notre couche moche. Maintenant, on en fait quoi de tous ces points rouges ?\n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExd3BzbHR2azJzMTA0cWlzNG04ZDZsY2t4OW45dHRwNnEyNDFsOXNuOCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/U4Jrf8bUUdDLG/giphy.webp){fig-alt=\"GIF: Poisson et pointer laser\" fig-align=\"center\"}\n\nFacile. On va d’abord la rendre un peu plus belle, puis on va la lire dans notre propre application OpenLayers et commencer à faire des trucs cools avec. **Mais avant**, comme vous avez tout compris à ce qu’on vient de faire, ajoutez toutes les autres couches du geopackage à votre espace de travail. Quand vous avez réussi à toutes les prévisualiser (et pleuré devant leur style austère), créez un nouveau projet QGIS et importez aussi ces couches.\n\n### Styliser mes couches\n\n[Documentation GeoServer \"Styling\"](https://docs.geoserver.org/main/en/user/styling/index.html#styling)\n\nPour le moment, afficher notre couche \"deals\" va juste donner l’impression que notre carte a attrappé la varicelle. On va commencer par changer son apparence en faisant des points bien ronds et d’une couleur qui crie moins \"DANGER !!!\". Pour ça, on va devoir **créer un nouveau style**.\n\n-   Allez dans \"Styles\" et cliquer sur \"Ajouter un nouveau style\".\n\n-   Nommez le style \"deals\" et choisissez l’espace de travail \"land_matrix\". Conservez le format SLD, c’est le seul disponible sans ajouter d’extensions.\n\n-   Pour nous aider, GeoServer propose de générer un SLD par défaut. Sélectionnez \"Point\" et cliquez sur \"Générer…\". Vous devriez vous retrouver avec un fichier .xml décrivant la couche.\n\nOn pourrait aller lire en détail le [SLD Cookbook](https://docs.geoserver.org/main/en/user/styling/sld/cookbook/index.html) de GeoServer pour écrire notre fichier manuellement, mais on est plus malins que ça. On a un super outil à disposition qui s’appelle QGIS.\n\n-   **Si vous ne l’avez pas déjà fait, créer un projet QGIS et ajoutez les couches Land Matrix.**\n\n<!-- -->\n\n-   Donnez un style sympa aux points de la couche deals. J’ai changé la couleur pour les rendre orange.\n\n-   Allez dans les propriétés de votre couche et dans \"Symbologie\". Tout en bas, choisissez \"Style\" et \"Enregistrer le style…\".\n\n-   Choisissez l’option \"En tant que fichier SLD\" et choisissez le chemin et le nom de votre fichier en cliquant sur \"…\" après \"Fichier\". J’ai appelé le mien \"deals.sld\"\n\n-   Allez chercher votre fichier et ouvrez-le avec un éditeur de texte (Notepad, VSCode, peu importe).\n\n-   Copiez le contenu.\n\n-   Retournez sur votre page GeoServer, supprimez tout le contenu de la zone de texte et collez à la place le contenu de `deals.sld`. Renommez le contenu de la balise `<se:Name>` en `Deal`. Voilà ce que ça donne pour moi :\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<StyledLayerDescriptor xmlns=\"http://www.opengis.net/sld\" xmlns:se=\"http://www.opengis.net/se\" xmlns:ogc=\"http://www.opengis.net/ogc\" xsi:schemaLocation=\"http://www.opengis.net/sld http://schemas.opengis.net/sld/1.1.0/StyledLayerDescriptor.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1.0\">\n  <NamedLayer>\n    <se:Name>gpkg_land_matrix — deals</se:Name>\n    <UserStyle>\n      <se:Name>gpkg_land_matrix — deals</se:Name>\n      <se:FeatureTypeStyle>\n        <se:Rule>\n          <se:Name>Deal</se:Name>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#ffd157</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>7</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n      </se:FeatureTypeStyle>\n    </UserStyle>\n  </NamedLayer>\n</StyledLayerDescriptor>\n```\n\nVous pouvez prévisualiser la légende en cliquant sur \"Aperçu de la légende\". Le bouton \"Ajouter une légende\" permet quand à lui d’ajouter une image customisée plutôt qu’une génération automatique. C’est pratique quand on a des légendes complexes, mais pas pour le moment. Ensuite, sauvegardez la légende quand elle vous convient.\n\n::: callout-tip\nUne autre méthode pour charger le contenu d’un fichier de style .sld est de cliquer sur \"Browse\" en dessous de \"Fichier de style\". Allez chercher votre fichier .sld et cliquez sur \"Charger…\" pour vous économiser quelques copier-coller par la suite !\n:::\n\nMaintenant, il faut dire à GeoServer qu’on veut utiliser ce style avec notre couche \"deals\".\n\n-   Allez dans \"Couches\".\n\n<!-- -->\n\n-   Sélectionnez la couche \"deals et allez dans l’onglet \"Publication\".\n\n-   Dans \"Style par défaut\", sélectionnez \"land_matrix:deals\" et Sauvegardez.\n\nMaintenant, vous pouvez de nouveau prévisualiser la couche \"deals\" et voilà ! Nos points sont ronds et jaunes. Vous savez maintenant créer un nouveau style SLD depuis QGIS et l’ajouter à une couche dans GeoServer !\n\n![](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExNzVzNTF4cGtqaW9lZmR5MHRtdG93c3dvcHE0Zjk3dWJsYWJzejdwcSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/rkq5mivgZVh8yN8zfy/giphy.webp){fig-alt=\"GIF: Cristina Cordula\" fig-align=\"center\"}\n\nNormalement, vous commencez à bien comprendre le fonctionnement de GeoServer et la publication des couches. Créez un style de couleur unique pour \"deals_by_country\" qu’on utilisera comme pseudo fond de carte. Ensuite, créez un style en cercles proportionnels pour \"deals_by_country_centroid\" en vous basant sur l’attribut \"surface_ha\".\n\n::: callout-warning\n## Attention à la sémiologie\n\nJe ne veux pas voir de polygones \"deals_by_country\" de différentes couleurs. **On n’utilise pas de carte choroplèthe pour représenter une valeur absolue, elles servent pour les valeurs relatives ou les catégories.**\n:::\n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2FzZWozcWc0bnIyMmVscjZ5a2N4d29yZjVic2oyNmZ3NDNzdHhqZCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3eRtlBVLi5tLPhmn11/giphy.webp){fig-alt=\"GIF: I'm watching you\" fig-align=\"center\"}\n\nUne fois que vous avez au moins ajouté votre style à \"deals_by_country\" dans GeoServer, vous pouvez passer à la suite. Si vous avez un train de retard, cliquez sur les boutons ci-dessous pour dérouler mes styles et les copier-coller dans votre GeoServer.\n\n::: {.callout-note collapse=\"true\"}\n## SLD pour \"deals_by_country\"\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<StyledLayerDescriptor xmlns=\"http://www.opengis.net/sld\" xmlns:se=\"http://www.opengis.net/se\" xmlns:ogc=\"http://www.opengis.net/ogc\" xsi:schemaLocation=\"http://www.opengis.net/sld http://schemas.opengis.net/sld/1.1.0/StyledLayerDescriptor.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1.0\">\n  <NamedLayer>\n    <se:Name>gpkg_land_matrix — deals_by_country</se:Name>\n    <UserStyle>\n      <se:Name>gpkg_land_matrix — deals_by_country</se:Name>\n      <se:FeatureTypeStyle>\n        <se:Rule>\n          <se:Name>Single symbol</se:Name>\n          <se:PolygonSymbolizer>\n            <se:Fill>\n              <se:SvgParameter name=\"fill\">#fdbf6f</se:SvgParameter>\n              <se:SvgParameter name=\"fill-opacity\">0.35</se:SvgParameter>\n            </se:Fill>\n            <se:Stroke>\n              <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n              <se:SvgParameter name=\"stroke-width\">1</se:SvgParameter>\n              <se:SvgParameter name=\"stroke-linejoin\">bevel</se:SvgParameter>\n            </se:Stroke>\n          </se:PolygonSymbolizer>\n        </se:Rule>\n      </se:FeatureTypeStyle>\n    </UserStyle>\n  </NamedLayer>\n</StyledLayerDescriptor>\n```\n:::\n\n::: {.callout-note collapse=\"true\"}\n## SLD pour \"deals_by_country_centroid\"\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<StyledLayerDescriptor xmlns=\"http://www.opengis.net/sld\" xmlns:se=\"http://www.opengis.net/se\" xmlns:ogc=\"http://www.opengis.net/ogc\" xsi:schemaLocation=\"http://www.opengis.net/sld http://schemas.opengis.net/sld/1.1.0/StyledLayerDescriptor.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1.0\">\n  <NamedLayer>\n    <se:Name>gpkg_land_matrix — deals_by_country_centroid</se:Name>\n    <UserStyle>\n      <se:Name>gpkg_land_matrix — deals_by_country_centroid</se:Name>\n      <se:FeatureTypeStyle>\n        <se:Rule>\n          <se:Name>201 - 5466</se:Name>\n          <se:Description>\n            <se:Title>201 - 5466</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>200.81000000000000227</ogc:Literal>\n              </ogc:PropertyIsGreaterThanOrEqualTo>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>5466.3999999999996362</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>4</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n        <se:Rule>\n          <se:Name>5466 - 20413</se:Name>\n          <se:Description>\n            <se:Title>5466 - 20413</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThan>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>5466.3999999999996362</ogc:Literal>\n              </ogc:PropertyIsGreaterThan>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>20412.80000000001018634</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>10</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n        <se:Rule>\n          <se:Name>20413 - 61376</se:Name>\n          <se:Description>\n            <se:Title>20413 - 61376</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThan>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>20412.80000000001018634</ogc:Literal>\n              </ogc:PropertyIsGreaterThan>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>61375.88199999996868428</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>16</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n        <se:Rule>\n          <se:Name>61376 - 160220</se:Name>\n          <se:Description>\n            <se:Title>61376 - 160220</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThan>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>61375.88199999996868428</ogc:Literal>\n              </ogc:PropertyIsGreaterThan>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>160220.00000000005820766</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>22</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n        <se:Rule>\n          <se:Name>160220 - 1509612</se:Name>\n          <se:Description>\n            <se:Title>160220 - 1509612</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThan>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>160220.00000000005820766</ogc:Literal>\n              </ogc:PropertyIsGreaterThan>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>1509612</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>29</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n      </se:FeatureTypeStyle>\n    </UserStyle>\n  </NamedLayer>\n</StyledLayerDescriptor>\n```\n:::\n\n### Lire mes flux dans une autre application\n\nCourage, on touche au but. Vous aurez bientôt fait le tour du fonctionnement basique de GeoServer. Maintenant qu’on a nos couches, on veut pouvoir les lire.\n\nPour commencer, on va rapidement vérifier qu’on communique bien avec notre GeoServer en utilisant QGIS et la requête `GetCapabilities` du serveur. Cette requête, lorsqu’elle réussit, nous répond avec un fichier .xml qui explique à QGIS tout ce que le serveur est capable de faire, et notamment quelles couches peuvent être affichées.\n\n-   Dans QGIS, cliquez sur \"Ajouter une couche\" et sélectionnez \"WMS\".\n\n-   Dans l’onglet \"Couches\", cliquez sur \"Nouveau\".\n\n-   Appelez la connexion \"mon_geoserver\" et collez l’url `GetCapabilities` dans \"URL\". Elle devrait être identique à celle-ci :\n\n``` html\nhttp://localhost/geoserver/land_matrix/wms?service=WMS&version=1.1.0&request=GetCapabilities\n```\n\n::: {.callout-important collapse=\"true\"}\n## Ça ne fonctionne pas !\n\nPour vérifier que votre requête est bonne, allez dans GeoServer, affichez n’importe quelle couche en prévisualisation et copiez l’adresse.\n\n``` html\nhttp://localhost/geoserver/land_matrix/wms?service=WMS&version=1.1.0&request=GetMap&layers=land_matrix%3Adeals&bbox=-180.0%2C-90.0%2C180.0%2C90.0&width=768&height=384&srs=EPSG%3A4326&styles=&format=application/openlayers\n```\n\nSupprimez tout ce qui se trouve après \"request=\" et ajoutez \"GetCapabilities\".\n\n``` html\nhttp://localhost/geoserver/land_matrix/wms?service=WMS&version=1.1.0&request=GetCapabilities\n```\n:::\n\n-   Cliquez ensuite sur \"Connexion\" et vérifiez qu’une liste de couche apparaît et qu’elle contient bien vos couches \"deals\", etc.\n\nVous pouvez afficher la couche dans QGIS avec \"Add\" si vous le souhaitez. L’essentiel, c’est qu’on a vérifier que notre serveur émet bien des flux WMS pour nos couches et qu’on peut bien les lire. On va maintenant faire la même chose dans une application OpenLayers. Comme on n’a pas encore commencé les cours, je vous donne le code. Vous verrez, ça ressemble beaucoup à Leaflet. Dans le dossier de votre choix, créez un document `index.html` et collez le contenu suivant :\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>GeoServer + OpenLayers</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width\">\n\n        <!-- CSS -->\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@main/dist/en/v7.1.0/ol/ol.css\" />\n        <style>\n        #map {\n            height: 500px;\n            width: 800px;\n        }\n        </style>\n    </head>\n    <body>\n        <h1>GeoServer + OpenLayers</h1>\n\n        <div id=\"map\"></div>\n\n        <!-- OpenLayers JS-->\n        <script src=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@main/dist/en/v7.1.0/ol/dist/ol.js\"></script>\n\n        <!-- App code -->\n        <script>\n            // OSM layer and source\n            var source_osm = new ol.source.OSM()\n            var layer_osm = new ol.layer.Tile({ source: source_osm })\n\n            // GeoServer layer and source\n\n            // Map\n            var map = new ol.Map({\n                target: 'map',\n                layers: [ layer_osm ],\n                view: new ol.View({\n                center: ol.proj.fromLonLat([2.1833, 41.3833]),\n                zoom: 2\n                })\n            });\n        </script>\n\n    </body>\n</html>\n```\n\nDouble-cliquez sur `index.html` pour l’ouvrir dans le navigateur. Vous devriez voir apparaître une carte avec un fond OSM. On va ajouter nos couches GeoServer à cette carte.\n\n![](/static/captures/geonum_geoserver_openlayers_1.png){fig-alt=\"Aperçu de la page web avec une carte OpenLayers\" fig-align=\"left\"}\n\nSous la section commentée \"GeoServer Layer and source\", ajoutez les lignes suivantes :\n\n``` javascript\nvar url_geoserver = 'http://localhost/geoserver/land_matrix/wms'\nvar source_geoserver = new ol.source.ImageWMS({\n    url: url_geoserver,\n    params: {'LAYERS': 'land_matrix:deals'},\n    serverType: 'geoserver',\n})\nvar layer_geoserver = new ol.layer.Image({ source: source_geoserver })\n```\n\nEt ajoutez `layer_geoserver` à la liste de couches de `map` :\n\n``` javascript\n// Map\nvar map = new ol.Map({\n    target: 'map',\n    layers: [ layer_osm, layer_geoserver ],\n    view: new ol.View({\n    center: ol.proj.fromLonLat([2.1833, 41.3833]),\n    zoom: 2\n    })\n});\n```\n\nActualisez la carte. Vous devriez maintenant voir apparaître la couche \"deals\" de l’entrepôt \"land_matrix\" ! Décortiquons rapidement ces lignes de code.\n\n``` javascript\nvar url_geoserver = 'http://localhost/geoserver/land_matrix/wms'\n```\n\nOn récupère l’url de notre serveur. Si vous ne la trouvez pas, allez dans votre GeoServer et prévisualisez n’importe quelle couche. Récupérez l’url et coupez tout après \"wms\". `land_matrix` est l’URI que nous avons donné à notre espace de travail (voir la section Espaces de travail du TP).\n\n``` javascript\nvar source_geoserver = new ol.source.ImageWMS({\n    url: url_geoserver,\n    params: {'LAYERS': 'land_matrix:deals'},\n    serverType: 'geoserver',\n})\n```\n\nOn crée ensuite une nouvelle source de données de type `ImageWMS`. On indique l’url de la source, à savoir l’url de notre espace de données GeoServer stocké dans la variable `url_geoserver`. L’image prend aussi un ou plusieurs paramètres. On indique dans 'LAYERS' la couche qu’on souhaite afficher. Celle ligne s’écrit toujours sous la forme :\n\n``` javascript\n'LAYERS' : '<entrepôt>:<couche>'\n```\n\nSi vous avez un doute, allez dans \"Prévisualisation de la couche\" et regardez le contenu de la colonne \"Nom\". C’est la valeur à donner à 'LAYERS'.\n\nEnfin, on renseigne le type du serveur, ici 'geoserver'. Ce paramètre permet à OpenLayers de communiquer plus facilement avec GeoServer lorsque vous utiliserez des fonctionnalités plus avancées. De manière générale, cela vous permet aussi de vous souvenir du type de serveur avec lequel vous communiquez.\n\nChouette, après tout ça on a enfin réussi à créer, lire et afficher un flux WMS ! Sauf que, il manque encore quelque chose… la légende ! Et là vous me dites \"pitié, j’en peux plus, j’ai la tête qui va exploser\". Allez, encore un petit effort. On a vu que GeoServer est capable de générer tout seul une légende, il nous suffit donc de la récupérer. Pour ça, rien de plus facile ! Le serveur distribue les images comme il distribue les couches de données. Il nous suffit de récupérer l’image en question et l’afficher dans une nouvelle `<div>` sur notre carte.\n\nOn reviendra en détail le fonctionnement des légendes dans le TP sur OpenLayers. Commencez par créer une `<div>` pour la légende sous `<div id=\"map\"></div>` :\n\n``` html\n<div id=\"map\"></div>\n<div><img id=\"legend\" /></div>\n```\n\nNotre script permettra de modifier la source de l’image `legend` en interrogeant GeoServer à chaque fois qu’on fera changer la résolution de la carte. Dans le tag `<script>`, en dessous du code de la carte \"Map\", ajoutez les lignes suivantes :\n\n``` html\n<!-- App code -->\n<script>\n    //…\n\n    // Function to update the legend    \n    function updateLegend(resolution) {\n        const graphicUrl = source_geoserver.getLegendUrl(resolution, { 'LEGEND_OPTIONS' : 'forceLabels:on' });\n        const img = document.getElementById('legend');\n        img.src = graphicUrl;\n    };\n\n    // Initial legend\n    const resolution = map.getView().getResolution();\n    updateLegend(resolution);\n\n    // Update legend when resolution changes\n    map.getView().on('change:resolution', function (event) {\n        const resolution = event.target.getResolution();\n        updateLegend(resolution);\n    });\n\n</script>\n```\n\nEn résumé :\n\n-   La fonction `updateLegend()` permet de récupérer l’url de la légende depuis notre source GeoServer `source_geoserver` en utilisant la méthode `getLegendUrl()`. On modifie ensuite la source de notre image `<img id=\"legend\" />` sur l’url de la légende.\n\n-   La fonction `getLegendUrl()` a besoin de connaître la résolution de la carte pour fonctionner.\n\n-   Lorsque la carte est créée pour la première fois, on stocke sa résolution dans la variable `resolution`. La méthode `getView()` de l’objet `map` permet de récupérer la valeur de cette résolution. Ensuite, on exécute notre fonction `updateLegend()` pour récupérer la légende une première fois.\n\n-   Pour mettre à jour la légende lorsque la résolution change, on écoute les évènements `change:resolution` de la map. À chaque fois que la résolution change, on va récupérer à nouveau cette résolution et exécuter la fonction `updateLegend()`.\n\n::: {.callout-note collapse=\"true\"}\n## Code complet de l’application\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>GeoServer + OpenLayers</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width\">\n\n        <!-- CSS -->\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@main/dist/en/v7.1.0/ol/ol.css\" />\n        <style>\n        #map {\n            height: 500px;\n            width: 800px;\n        }\n        </style>\n    </head>\n    <body>\n        <h1>GeoServer + OpenLayers</h1>\n\n        <div id=\"map\"></div>\n        <div><img id=\"legend\" /></div>\n\n        <!-- OpenLayers JS-->\n        <script src=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@main/dist/en/v7.1.0/ol/dist/ol.js\"></script>\n\n        <!-- App code -->\n        <script>\n            // OSM layer and source\n            var source_osm = new ol.source.OSM()\n            var layer_osm = new ol.layer.Tile({ source: source_osm })\n\n            // GeoServer layer and source\n            var url_geoserver = 'http://localhost/geoserver/land_matrix/wms'\n            var source_geoserver = new ol.source.ImageWMS({\n                url: url_geoserver,\n                params: {'LAYERS': 'land_matrix:deals'},\n                serverType: 'geoserver',\n            })\n            var layer_geoserver = new ol.layer.Image({ source: source_geoserver })\n\n            // Map\n            var map = new ol.Map({\n                target: 'map',\n                layers: [ layer_osm, layer_geoserver ],\n                view: new ol.View({\n                center: ol.proj.fromLonLat([2.1833, 41.3833]),\n                zoom: 2\n                })\n            });\n\n            // Function to update the legend    \n            function updateLegend(resolution) {\n                const graphicUrl = source_geoserver.getLegendUrl(resolution, { 'LEGEND_OPTIONS' : 'forceLabels:on' });\n                const img = document.getElementById('legend');\n                img.src = graphicUrl;\n            };\n\n            // Initial legend\n            const resolution = map.getView().getResolution();\n            updateLegend(resolution);\n\n            // Update legend when resolution changes\n            map.getView().on('change:resolution', function (event) {\n                const resolution = event.target.getResolution();\n                updateLegend(resolution);\n            });\n\n        </script>\n\n    </body>\n</html>\n```\n:::\n\n**Ouf !** On a enfin une légende. Pour ceux qui ont encore le temps et l’énergie, je vous propose d’**afficher les autres couches et leur légende sur la carte**, au moins \"deals_by_country_centroids\" pour avoir nos cercles proportionnels. C’est parti !\n\n![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExOWFxaHJ2azNsbno2NzRwaDc2c29rdjJwbnltYmJqdjVzM3B3aHV4biZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/d31vTpVi1LAcDvdm/giphy.webp){fig-alt=\"GIF: Bob Ross\" fig-align=\"center\"}\n\n## Conclusion(s)\n\n-   C’est quoi l’intérêt du serveur carto, déjà ?\n\n    -   Centralisation de la donnée et mise à jour\n\n    -   Distribution de la donnée\n\n    -   Gestion des droits\n\n    -   Bien quand on a une organisation et bcp de données, s’intègre très bien dans une IDG\n\n    -   Bien pour les couches Raster et les couches Vecteur lourdes qui peuvent être servies en tant qu’images (WMS)\n\n    -   Connexion directe à une base de données PostgreSQL\n\n    -   Possibilité d’écrire des requêtes SQL pour former les couches\n\n    -   Possibilité de créer des styles complexes \"à la QGIS\".\n\n-   Est-ce que j’en ai besoin pour mon projet GeoNum ?\n\n    -   Ça dépend des données que vous utilisez et ce que vous en faites. Le mieux c’est d’en discuter avec les profs !\n\n-   Je n’utilise pas de connexion à une base de données, je préfère juste afficher des couches avec un style complexe. Ce serait pas plus simple si on pouvait directement importer les couches d’un projet QGIS ?\n\n![](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdzF3dWtlOGtjeHFmM2lheG05OGs2M2dmdmFsdnRjZ2t5am5tNnM1dSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/B9KKBuOIp4zqI7Cll0/giphy.webp){fig-alt=\"GIF: Clin d’œil\" fig-align=\"center\"}\n\n## TP - QGIS Server avec LizMap\n\n*En cours de rédaction, revenez plus tard !*\n","srcMarkdownNoYaml":"\n\n## Objectifs\n\n-   Comprendre ce qu’est un serveur cartographique et ce que sont les flux WMS, WFS, etc.\n\n-   Connaître les principaux serveurs cartographiques avec un focus sur GeoServer, un serveur cartographique Open-Source.\n\n-   Apprendre à déployer une instance de GeoServer à l’aide de Docker.\n\n-   Publier des couches avec GeoServer et les styliser en passant par QGIS.\n\n-   Lire les flux WMS de mon GeoServer dans une application OpenLayers basique.\n\n-   Être capable de déterminer dans quelles situations on a besoin d’un serveur cartographique.\n\n## Cours\n\n[Slides : Serveurs Cartographiques](./slides_cours_1.qmd){target=\"_blank\"}\n\n## ️TP - Prise en main de GeoServer\n\n### Déploiement de GeoServer à l’aide de Docker\n\n[Documentation GeoServer](https://docs.geoserver.org/main/en/user/installation/docker.html) - [Dépôt de l’image Docker](https://github.com/geoserver/docker)\n\n::: callout-important\nCe TP suppose que Docker est installé sur la machine. Il a aussi été écrit pour une machine Linux, certains chemins et lignes de commande peuvent donc être différents sur une machine Windows ou Mac.\n:::\n\nUne fois que Docker est installé, lancez la commande suivante pour télécharger une image de GeoServer en version 2.26.0 :\n\n``` bash\ndocker pull docker.osgeo.org/geoserver:2.26.0\n```\n\nPuis, pour construire un container à partir de l’image de GeoServer :\n\n``` bash\ndocker run -it -p 80:8080 docker.osgeo.org/geoserver:2.26.0\n```\n\nSi vous n’avez pas eu de message d’erreur, rendez-vous sur <http://localhost/geoserver> et connectez-vous avec l’identifiant `admin` et le mot de passe `geoserver`. Si l’authentification a fonctionné, félicitations, vous avez réussi à faire tourner un container avec GeoServer !\n\n::: {.callout-note collapse=\"true\"}\n## Attends, attends… des containers, des images ? Hein ?\n\n![](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2xjZWIxY3gxeXZlZXdqeGZ1b3d6ZDRoaWQ3amtjMmd1dmcxdGVndSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WRQBXSCnEFJIuxktnw/giphy.webp){fig-alt=\"GIF: Confused math\" fig-align=\"center\"}\n\nPas de panique ! On n’a pas besoin de savoir exactement comment fonctionne Docker pour ce TP. Si on veut simplifier :\n\n-   Docker permet de faire tourner des **services** dans des **containers** créés à partir d’**images**.\n\n-   Une **image** est une recette à suivre pour créer mon container. Elle demande à Docker de créer un container basé sur Debian, d’y installer GeoServer ou bien une base PostgreSQL avec l’extension postGIS, etc.\n\n-   Un **container** est le produit d’une image. C’est un peu le plat cuisiné à partir de la recette. C’est à l’intérieur du container que tourne mon **service** comme ma base de données ou mon serveur web. On peut connecter plusieurs containers entre eux, pratique si on veut un site web et une base de données qui fonctionnent ensemble !\n\n-   Un **service** est généralement une base de données (ex. PostgreSQL), un serveur de site web (ex. Apache), un serveur cartographique (ex. GeoServer), etc. Comme les bonnes pratiques demandent d’avoir un seul service par container, on va parler du \"container GeoServer\" pour dire \"le container qui contient mon service GeoServer\", ça va plus vite.\n\nSi ce n’est encore pas clair et que ça vous gêne pour la compréhension de la suite du TP, hop, on lève la main et on demande des explications, je suis là pour ça ! Et si vous voulez aller plus loin, rendez-vous sur la [documentation officelle de Docker](https://docs.docker.com/).\n:::\n\nPour vérifier que tout fonctionne, on va faire une petite manip rapide.\n\n-   En haut à droite de l’écran, si ce n’est pas déjà le cas, sélectionnez le langage \"fr\" pour passer l’interface en français.\n-   Allez dans \"Espaces de travail\" (menu à gauche de l’écran) et cliquez sur le bouton \"Ajouter un nouvel espace de travail\".\n-   Appelez-le \"mon_espace\" et donnez lui un URI `mon_espace`.\n-   Vérfiez qu’il apparaît bien dans la liste de vos espaces (normalement, au-dessus de \"ne\").\n\nEnsuite, on va arrêter notre container Docker. Commencez par utiliser la commande suivante :\n\n``` bash\ndocker ps\n```\n\nVous devriez voir apparaître une ligne avec l’ID de votre container dans la colonne CONTAINER ID, l’image utilisée pour le construire dans la colonne IMAGE, d’autres informations qui ne nous servent pas dans ce TP et son nom dans la colonne NAME. La commande `docker ps` permet de lister les containers actifs en ce moment. On souhaite arrêter notre container avec la commande `docker stop <container_name>`. Pour cela, il faut utiliser le nom du container à la place de `<container_name>`. Par exemple, voici les informations de mon container :\n\n```         \nCONTAINER ID   IMAGE                               COMMAND                  CREATED         STATUS                            PORTS                                     NAMES\n0a885cadf11d   docker.osgeo.org/geoserver:2.26.0   \"bash /opt/startup.sh\"   8 seconds ago   Up 7 seconds (health: starting)   0.0.0.0:80->8080/tcp, [::]:80->8080/tcp   charming_pare\n```\n\nLe nom de mon container est donc `charming_pare`. Pour arrêter mon container, je dois taper la commande suivante :\n\n``` bash\ndocker stop charming_pare\n```\n\n::: callout-tip\nQuand on tape des lignes de commande en bash, utilisez la touche `tab` pour auto-compléter la commande. Par exemple, ici, j’ai seulement tapé `docker stop ch` puis appuyé sur tab qui a complété le nom de mon container. Pratique, non ? N’hésitez pas à en abuser. Si l’auto-complete ne fonctionne pas, c’est qu’il ne trouve rien OU plusieurs résultats. Dans ce cas, continuez à écrire la commande à la main et réessayez.\n:::\n\nUtilisez à nouveau la commande `docker ps` pour vérifier que ce container n’apparaît plus dans la liste. Normalement, si vous actualisez la page GeoServer, vous devriez avoir une erreur du type \"localhost refused to connect\".\n\n**Alors, c’est bien sympa tout ça, mais en l’état, on ne va pas pouvoir ajouter de données dans notre container.** Il faudrait pouvoir accéder au dossier `/data` de GeoServer. Heureusement, pour nous simplifier la vie, on peut utiliser Docker pour \"connecter\" deux dossiers en eux (monter, *mount* en anglais). Pour ça, il faut créer sur notre ordinateur un nouveau dossier dans lequel on mettra tout ce qu’on veut retrouver dans le `/data` de notre GeoServer. Promis, c’est la dernière étape aussi technique, ensuite je me détends et j’arrête de vous faire taper autant de lignes de commande.\n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExYmtrc2k0ZGljMG0yZm41M3Nhd2Zlb2FidndvcWVtbDRhOTUwZ3cxdiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/7hJZcKzjIufeOmqKSj/giphy.webp){fig-alt=\"GIF: Code code code\" fig-align=\"center\"}\n\nD’abord, on supprime notre container. On va en créer un nouveau dans les étapes suivantes.\n\n``` bash\ndocker rm <nom_du_container>\n```\n\nEnsuite, on va créer un dossier à monter sur le `/data` de notre container.\n\n-   Allez dans Documents et créer un nouveau dossier \"GeoServer\".\n\n-   Copiez le chemin ABSOLU vers ce dossier. Par exemple, chez moi (Ubuntu), ça donne ça : `/home/marie/Documents/GeoServer`\n\n-   Remplacez `\"/absolute/path/on/host\"` dans la commande suivante et copiez-collez la quelque part, on ne sait jamais.\n\n``` bash\ndocker run -it -p 80:8080 \\\n  --mount src=\"/absolute/path/on/host\",target=/opt/geoserver_data/,type=bind \\\n  docker.osgeo.org/geoserver:2.26.0\n```\n\n-   Exécutez la ligne de commande.\n\nMaintenant, on va ajouter notre jeu de données `land_matrix_mines` à notre dossier `/data`.\n\n-   Téléchargez le jeu de données [land_matrix_mines](/data/land_matrix/land_matrix_mines.gpkg).\n\n-   Dans l’explorateur de fichiers de votre ordinateur, ouvrez votre dossier GeoServer. Normalement, vous auriez du voir apparaître plusieurs nouveaux dossiers. Allez dans `/data` et créez un nouveau dossier `geopackage`.\n\n-   Glissez le fichier `land_matrix_mines.gpkg` dans le dossier `geopackage`.\n\n::: {.callout-important collapse=\"true\"}\n## Je ne peux pas créer de nouveau dossier / déplacer mon fichier !\n\nSi vous ne pouvez pas créer de nouveau dossier, c’est que vous ne disposez pas des permissions suffisantes. Dans mon cas (sur Ubuntu), tous les dossiers appartenaient à l’utilisateur et au groupe `root`. Il faut utiliser la commande `chown` :\n\n``` bash\nsudo chown -R <user>:<group> /chemin/vers/mon/dossier\n```\n\nPour changer les droits de mon dossier \\`/home/marie/Documents/GeoServer\\` j’ai donc tapé :\n\n``` bash\nsudo chown -R marie:marie /home/marie/Documents/GeoServer\n```\n\nSi ça ne fonctionne pas, ne restez pas bloqués et appelez-moi, on règle ça ensemble.\n:::\n\nC’est bon, ça fonctionne ? Parfait ! Les règles pour arrêter et démarrer son container restent les mêmes. Tout ce qu’il faut retenir, c’est qu’il ne faut pas supprimer ou déplacer votre dossier GeoServer sous peine de tout casser. Pour le reste, tout devrait fonctionner tranquillement.\n\n::: {.callout-tip collapse=\"true\"}\n## Rappel des commandes principales\n\n``` bash\n# Lister les containers actifs\ndocker ps\n\n# Lister tous les containers, même arrêtés\ndocker ps -a\n\n# Démarrer mon container\ndocker start <nom_du_container>\n\n# Arrêter mon container\ndocker stop <nom_du_container>\n\n# /!\\ Supprimer mon container\ndocker rm <nom_du_container>\n```\n:::\n\nVous avez survécu au déploiement du GeoServer, bien joué ! Prenez un moment pour souffler, allez vous chercher un café. La suite sera beaucoup moins prise de tête, c’est promis !\n\n![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmJ0amd0cmRoY2dyZXZmYndiNzd3MWM5amEybTY0bW92ZXkxaXo3ayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ceeFbVxiZzMBi/giphy.webp){fig-alt=\"GIF: Pause café\" fig-align=\"center\"}\n\n### Espaces de travail, Entrepôts et Couches\n\nCréer un **espace de travail**, c’est facile, on vient de le faire. Maintenant, on va créer un nouveau dépôt par défaut qu’on appellera `land_matrix` et dans lequel on ajoutera notre geopackage.\n\n-   Allez dans \"Espaces de travail\" et cliquez sur \"Ajouter un nouvel espace de travail\".\n\n-   Nommez l’espace de travail \"land_matrix\" et donnez lui l’URI \"land_matrix\".\n\n-   Cochez \"Espace de travail par défaut\".\n\n-   Ciquez sur \"Sauvegarder\".\n\nSi tout va bien, on voit maintenant notre espace \"land_matrix\" dans la liste. On va pouvoir ajouter un **entrepôt** de données dans notre espace.\n\n-   Allez dans \"Entrepôts\" et cliquez sur \"Ajouter un nouvel entrepôt\". Vous allez voir une liste de tous les types d’entrepôts de données qui peuvent être ajoutés à votre espace de travail, par exempe du GeoPackage, une base PostGIS, un Shapefile ou encore un flux WMS distant.\n\n-   Sélectionnez \"GeoPackage\".\n\n-   Nommez la source de données \"land_matrix_mines\" et ajoutez une petite description, par exemple \"Transactions minières de la Land Matrix, 2024\".\n\n-   Dans \"**Paramètres de connexion**\" cliquez sur \"Parcourir…\" à droite de \"database \\*\".\n\n-   Allez dans `data/geopackage/` et cliquez sur le jeu de données `land_matrix_mines.gpkg`.\n\n-   Videz le champ \"passwd\".\n\n-   Cliquez sur \"Sauvegarder\".\n\nUne fois de retour sur la page \"Entrepôts\", vous devriez voir votre entrepôt \"land_matrix_mines\" associé à l’espace de travail \"land_matrix\". On avance ! Maintenant, on veut publier et lire des **couches**.\n\n-   Allez dans \"Couches\" et cliquez sur \"Ajouter une nouvelle couche\".\n\n-   Sélectionnez \"land_matrix:land_matrix_mines\". Vous devriez voir apparaître une liste de couches.\n\n-   Cliquez sur \"Publier\" à droite de la couche \"deals\".\n\nL’onglet de publication de couche permet de configurer la couche et d’y ajouter de la métadonnée. Dans ce TP, on se concentrera sur les informations \"cruciales\" pour définir une couche, mais vous pourrez toujours allez plus loin en utilisant la [documentation GeoServer sur les couches](https://docs.geoserver.org/latest/en/user/data/webadmin/layers.html).\n\nLes trois choses à faire absolument à chaque fois dans l’onglet données sont :\n\n-   Renseigner les informations dans \"**Informations de base sur les donneés**\" comme le nom de la couche et un résumé. N’oubliez pas de laisser \"Activé\" et \"Publié\" cochés pour rendre la couche accessible depuis l’extérieur.\n\n-   Vérifier le \"**Système de Référence de Coordonnées (SRC)**\" qui doit être pré-rempli en EPSG:4326 dans notre cas. Il correspond à la projection WGS84 utilisée dans la grande majorité des cas en cartographie web.\n\n-   Définir les \"**Emprises**\" qui se calculent automatiquement sur GeoServer en cliquant sur \"Calculer depuis les limites du SRS\" et \"Calculées sur les emprises natives\".\n\nCliquez ensuite sur \"Appliquer\" pour sauvegarder vos changements et scrollez en haut de la page pour accéder à l’onglet \"Publication\".\n\n-   Dans \"**Paramètres de couche**\", cochez Interrogeable et vérifiez que le style par défaut est bien \"point\".\n\nCliquez sur \"Sauvegarder\". La couche devrait maintenant apparaître au sommet du tableau. Cliquez simplement sur le nom de la couche (ici \"deals\") pour la paramétrer à nouveau si besoin. Pour vérifier que tout a fonctionné, on peut prévisualiser la couche directement depuis GeoServer.\n\n-   Allez dans \"Prévisualisation de la Couche\" (menu à gauche de l’écran).\n\n-   Sur la ligne de la couche \"deals\", sélectionnez \"OpenLayers\".\n\nVous devriez voir apparaître quelque chose comme ça, avec des informations supplémentaires si vous cliquez sur des points (possible car notre couche est interrogeable) :\n\n![](/static/captures/geonum_geoserver_layer_preview.png){fig-alt=\"Prévisualisation de la couche deals dans GeoServer\" fig-align=\"center\"}\n\nSi c’est bon, bravo, ça a fonctionné ! Si vous voyez des artefacts autour des points, c’est normal. Ce que vous regardez, ce ne sont pas des polygones mais une image produite à partir de notre couche et transmise comme un flux WMS par notre serveur. L’intérêt, c’est qu’on peut afficher rapidement des couches très lourdes de cette manière, là où un GeoJSON commencerait à ramer. Et on peut toujours zoomer et cliquer sur un point pour l’interroger. C’est super pratique ! Ce flux WMS est récupéré et lu par une petite appli OpenLayers, c’est comme ça que vous êtes capable de voir la couche sur votre page web (vous sentez venir la transition vers les prochains cours, là ?).\n\nBon, super, on a notre couche moche. Maintenant, on en fait quoi de tous ces points rouges ?\n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExd3BzbHR2azJzMTA0cWlzNG04ZDZsY2t4OW45dHRwNnEyNDFsOXNuOCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/U4Jrf8bUUdDLG/giphy.webp){fig-alt=\"GIF: Poisson et pointer laser\" fig-align=\"center\"}\n\nFacile. On va d’abord la rendre un peu plus belle, puis on va la lire dans notre propre application OpenLayers et commencer à faire des trucs cools avec. **Mais avant**, comme vous avez tout compris à ce qu’on vient de faire, ajoutez toutes les autres couches du geopackage à votre espace de travail. Quand vous avez réussi à toutes les prévisualiser (et pleuré devant leur style austère), créez un nouveau projet QGIS et importez aussi ces couches.\n\n### Styliser mes couches\n\n[Documentation GeoServer \"Styling\"](https://docs.geoserver.org/main/en/user/styling/index.html#styling)\n\nPour le moment, afficher notre couche \"deals\" va juste donner l’impression que notre carte a attrappé la varicelle. On va commencer par changer son apparence en faisant des points bien ronds et d’une couleur qui crie moins \"DANGER !!!\". Pour ça, on va devoir **créer un nouveau style**.\n\n-   Allez dans \"Styles\" et cliquer sur \"Ajouter un nouveau style\".\n\n-   Nommez le style \"deals\" et choisissez l’espace de travail \"land_matrix\". Conservez le format SLD, c’est le seul disponible sans ajouter d’extensions.\n\n-   Pour nous aider, GeoServer propose de générer un SLD par défaut. Sélectionnez \"Point\" et cliquez sur \"Générer…\". Vous devriez vous retrouver avec un fichier .xml décrivant la couche.\n\nOn pourrait aller lire en détail le [SLD Cookbook](https://docs.geoserver.org/main/en/user/styling/sld/cookbook/index.html) de GeoServer pour écrire notre fichier manuellement, mais on est plus malins que ça. On a un super outil à disposition qui s’appelle QGIS.\n\n-   **Si vous ne l’avez pas déjà fait, créer un projet QGIS et ajoutez les couches Land Matrix.**\n\n<!-- -->\n\n-   Donnez un style sympa aux points de la couche deals. J’ai changé la couleur pour les rendre orange.\n\n-   Allez dans les propriétés de votre couche et dans \"Symbologie\". Tout en bas, choisissez \"Style\" et \"Enregistrer le style…\".\n\n-   Choisissez l’option \"En tant que fichier SLD\" et choisissez le chemin et le nom de votre fichier en cliquant sur \"…\" après \"Fichier\". J’ai appelé le mien \"deals.sld\"\n\n-   Allez chercher votre fichier et ouvrez-le avec un éditeur de texte (Notepad, VSCode, peu importe).\n\n-   Copiez le contenu.\n\n-   Retournez sur votre page GeoServer, supprimez tout le contenu de la zone de texte et collez à la place le contenu de `deals.sld`. Renommez le contenu de la balise `<se:Name>` en `Deal`. Voilà ce que ça donne pour moi :\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<StyledLayerDescriptor xmlns=\"http://www.opengis.net/sld\" xmlns:se=\"http://www.opengis.net/se\" xmlns:ogc=\"http://www.opengis.net/ogc\" xsi:schemaLocation=\"http://www.opengis.net/sld http://schemas.opengis.net/sld/1.1.0/StyledLayerDescriptor.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1.0\">\n  <NamedLayer>\n    <se:Name>gpkg_land_matrix — deals</se:Name>\n    <UserStyle>\n      <se:Name>gpkg_land_matrix — deals</se:Name>\n      <se:FeatureTypeStyle>\n        <se:Rule>\n          <se:Name>Deal</se:Name>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#ffd157</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>7</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n      </se:FeatureTypeStyle>\n    </UserStyle>\n  </NamedLayer>\n</StyledLayerDescriptor>\n```\n\nVous pouvez prévisualiser la légende en cliquant sur \"Aperçu de la légende\". Le bouton \"Ajouter une légende\" permet quand à lui d’ajouter une image customisée plutôt qu’une génération automatique. C’est pratique quand on a des légendes complexes, mais pas pour le moment. Ensuite, sauvegardez la légende quand elle vous convient.\n\n::: callout-tip\nUne autre méthode pour charger le contenu d’un fichier de style .sld est de cliquer sur \"Browse\" en dessous de \"Fichier de style\". Allez chercher votre fichier .sld et cliquez sur \"Charger…\" pour vous économiser quelques copier-coller par la suite !\n:::\n\nMaintenant, il faut dire à GeoServer qu’on veut utiliser ce style avec notre couche \"deals\".\n\n-   Allez dans \"Couches\".\n\n<!-- -->\n\n-   Sélectionnez la couche \"deals et allez dans l’onglet \"Publication\".\n\n-   Dans \"Style par défaut\", sélectionnez \"land_matrix:deals\" et Sauvegardez.\n\nMaintenant, vous pouvez de nouveau prévisualiser la couche \"deals\" et voilà ! Nos points sont ronds et jaunes. Vous savez maintenant créer un nouveau style SLD depuis QGIS et l’ajouter à une couche dans GeoServer !\n\n![](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExNzVzNTF4cGtqaW9lZmR5MHRtdG93c3dvcHE0Zjk3dWJsYWJzejdwcSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/rkq5mivgZVh8yN8zfy/giphy.webp){fig-alt=\"GIF: Cristina Cordula\" fig-align=\"center\"}\n\nNormalement, vous commencez à bien comprendre le fonctionnement de GeoServer et la publication des couches. Créez un style de couleur unique pour \"deals_by_country\" qu’on utilisera comme pseudo fond de carte. Ensuite, créez un style en cercles proportionnels pour \"deals_by_country_centroid\" en vous basant sur l’attribut \"surface_ha\".\n\n::: callout-warning\n## Attention à la sémiologie\n\nJe ne veux pas voir de polygones \"deals_by_country\" de différentes couleurs. **On n’utilise pas de carte choroplèthe pour représenter une valeur absolue, elles servent pour les valeurs relatives ou les catégories.**\n:::\n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExN2FzZWozcWc0bnIyMmVscjZ5a2N4d29yZjVic2oyNmZ3NDNzdHhqZCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3eRtlBVLi5tLPhmn11/giphy.webp){fig-alt=\"GIF: I'm watching you\" fig-align=\"center\"}\n\nUne fois que vous avez au moins ajouté votre style à \"deals_by_country\" dans GeoServer, vous pouvez passer à la suite. Si vous avez un train de retard, cliquez sur les boutons ci-dessous pour dérouler mes styles et les copier-coller dans votre GeoServer.\n\n::: {.callout-note collapse=\"true\"}\n## SLD pour \"deals_by_country\"\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<StyledLayerDescriptor xmlns=\"http://www.opengis.net/sld\" xmlns:se=\"http://www.opengis.net/se\" xmlns:ogc=\"http://www.opengis.net/ogc\" xsi:schemaLocation=\"http://www.opengis.net/sld http://schemas.opengis.net/sld/1.1.0/StyledLayerDescriptor.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1.0\">\n  <NamedLayer>\n    <se:Name>gpkg_land_matrix — deals_by_country</se:Name>\n    <UserStyle>\n      <se:Name>gpkg_land_matrix — deals_by_country</se:Name>\n      <se:FeatureTypeStyle>\n        <se:Rule>\n          <se:Name>Single symbol</se:Name>\n          <se:PolygonSymbolizer>\n            <se:Fill>\n              <se:SvgParameter name=\"fill\">#fdbf6f</se:SvgParameter>\n              <se:SvgParameter name=\"fill-opacity\">0.35</se:SvgParameter>\n            </se:Fill>\n            <se:Stroke>\n              <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n              <se:SvgParameter name=\"stroke-width\">1</se:SvgParameter>\n              <se:SvgParameter name=\"stroke-linejoin\">bevel</se:SvgParameter>\n            </se:Stroke>\n          </se:PolygonSymbolizer>\n        </se:Rule>\n      </se:FeatureTypeStyle>\n    </UserStyle>\n  </NamedLayer>\n</StyledLayerDescriptor>\n```\n:::\n\n::: {.callout-note collapse=\"true\"}\n## SLD pour \"deals_by_country_centroid\"\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<StyledLayerDescriptor xmlns=\"http://www.opengis.net/sld\" xmlns:se=\"http://www.opengis.net/se\" xmlns:ogc=\"http://www.opengis.net/ogc\" xsi:schemaLocation=\"http://www.opengis.net/sld http://schemas.opengis.net/sld/1.1.0/StyledLayerDescriptor.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1.0\">\n  <NamedLayer>\n    <se:Name>gpkg_land_matrix — deals_by_country_centroid</se:Name>\n    <UserStyle>\n      <se:Name>gpkg_land_matrix — deals_by_country_centroid</se:Name>\n      <se:FeatureTypeStyle>\n        <se:Rule>\n          <se:Name>201 - 5466</se:Name>\n          <se:Description>\n            <se:Title>201 - 5466</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>200.81000000000000227</ogc:Literal>\n              </ogc:PropertyIsGreaterThanOrEqualTo>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>5466.3999999999996362</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>4</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n        <se:Rule>\n          <se:Name>5466 - 20413</se:Name>\n          <se:Description>\n            <se:Title>5466 - 20413</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThan>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>5466.3999999999996362</ogc:Literal>\n              </ogc:PropertyIsGreaterThan>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>20412.80000000001018634</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>10</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n        <se:Rule>\n          <se:Name>20413 - 61376</se:Name>\n          <se:Description>\n            <se:Title>20413 - 61376</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThan>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>20412.80000000001018634</ogc:Literal>\n              </ogc:PropertyIsGreaterThan>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>61375.88199999996868428</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>16</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n        <se:Rule>\n          <se:Name>61376 - 160220</se:Name>\n          <se:Description>\n            <se:Title>61376 - 160220</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThan>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>61375.88199999996868428</ogc:Literal>\n              </ogc:PropertyIsGreaterThan>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>160220.00000000005820766</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>22</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n        <se:Rule>\n          <se:Name>160220 - 1509612</se:Name>\n          <se:Description>\n            <se:Title>160220 - 1509612</se:Title>\n          </se:Description>\n          <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\n            <ogc:And>\n              <ogc:PropertyIsGreaterThan>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>160220.00000000005820766</ogc:Literal>\n              </ogc:PropertyIsGreaterThan>\n              <ogc:PropertyIsLessThanOrEqualTo>\n                <ogc:PropertyName>suface_ha</ogc:PropertyName>\n                <ogc:Literal>1509612</ogc:Literal>\n              </ogc:PropertyIsLessThanOrEqualTo>\n            </ogc:And>\n          </ogc:Filter>\n          <se:PointSymbolizer>\n            <se:Graphic>\n              <se:Mark>\n                <se:WellKnownName>circle</se:WellKnownName>\n                <se:Fill>\n                  <se:SvgParameter name=\"fill\">#e5b636</se:SvgParameter>\n                </se:Fill>\n                <se:Stroke>\n                  <se:SvgParameter name=\"stroke\">#232323</se:SvgParameter>\n                  <se:SvgParameter name=\"stroke-width\">0.5</se:SvgParameter>\n                </se:Stroke>\n              </se:Mark>\n              <se:Size>29</se:Size>\n            </se:Graphic>\n          </se:PointSymbolizer>\n        </se:Rule>\n      </se:FeatureTypeStyle>\n    </UserStyle>\n  </NamedLayer>\n</StyledLayerDescriptor>\n```\n:::\n\n### Lire mes flux dans une autre application\n\nCourage, on touche au but. Vous aurez bientôt fait le tour du fonctionnement basique de GeoServer. Maintenant qu’on a nos couches, on veut pouvoir les lire.\n\nPour commencer, on va rapidement vérifier qu’on communique bien avec notre GeoServer en utilisant QGIS et la requête `GetCapabilities` du serveur. Cette requête, lorsqu’elle réussit, nous répond avec un fichier .xml qui explique à QGIS tout ce que le serveur est capable de faire, et notamment quelles couches peuvent être affichées.\n\n-   Dans QGIS, cliquez sur \"Ajouter une couche\" et sélectionnez \"WMS\".\n\n-   Dans l’onglet \"Couches\", cliquez sur \"Nouveau\".\n\n-   Appelez la connexion \"mon_geoserver\" et collez l’url `GetCapabilities` dans \"URL\". Elle devrait être identique à celle-ci :\n\n``` html\nhttp://localhost/geoserver/land_matrix/wms?service=WMS&version=1.1.0&request=GetCapabilities\n```\n\n::: {.callout-important collapse=\"true\"}\n## Ça ne fonctionne pas !\n\nPour vérifier que votre requête est bonne, allez dans GeoServer, affichez n’importe quelle couche en prévisualisation et copiez l’adresse.\n\n``` html\nhttp://localhost/geoserver/land_matrix/wms?service=WMS&version=1.1.0&request=GetMap&layers=land_matrix%3Adeals&bbox=-180.0%2C-90.0%2C180.0%2C90.0&width=768&height=384&srs=EPSG%3A4326&styles=&format=application/openlayers\n```\n\nSupprimez tout ce qui se trouve après \"request=\" et ajoutez \"GetCapabilities\".\n\n``` html\nhttp://localhost/geoserver/land_matrix/wms?service=WMS&version=1.1.0&request=GetCapabilities\n```\n:::\n\n-   Cliquez ensuite sur \"Connexion\" et vérifiez qu’une liste de couche apparaît et qu’elle contient bien vos couches \"deals\", etc.\n\nVous pouvez afficher la couche dans QGIS avec \"Add\" si vous le souhaitez. L’essentiel, c’est qu’on a vérifier que notre serveur émet bien des flux WMS pour nos couches et qu’on peut bien les lire. On va maintenant faire la même chose dans une application OpenLayers. Comme on n’a pas encore commencé les cours, je vous donne le code. Vous verrez, ça ressemble beaucoup à Leaflet. Dans le dossier de votre choix, créez un document `index.html` et collez le contenu suivant :\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>GeoServer + OpenLayers</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width\">\n\n        <!-- CSS -->\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@main/dist/en/v7.1.0/ol/ol.css\" />\n        <style>\n        #map {\n            height: 500px;\n            width: 800px;\n        }\n        </style>\n    </head>\n    <body>\n        <h1>GeoServer + OpenLayers</h1>\n\n        <div id=\"map\"></div>\n\n        <!-- OpenLayers JS-->\n        <script src=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@main/dist/en/v7.1.0/ol/dist/ol.js\"></script>\n\n        <!-- App code -->\n        <script>\n            // OSM layer and source\n            var source_osm = new ol.source.OSM()\n            var layer_osm = new ol.layer.Tile({ source: source_osm })\n\n            // GeoServer layer and source\n\n            // Map\n            var map = new ol.Map({\n                target: 'map',\n                layers: [ layer_osm ],\n                view: new ol.View({\n                center: ol.proj.fromLonLat([2.1833, 41.3833]),\n                zoom: 2\n                })\n            });\n        </script>\n\n    </body>\n</html>\n```\n\nDouble-cliquez sur `index.html` pour l’ouvrir dans le navigateur. Vous devriez voir apparaître une carte avec un fond OSM. On va ajouter nos couches GeoServer à cette carte.\n\n![](/static/captures/geonum_geoserver_openlayers_1.png){fig-alt=\"Aperçu de la page web avec une carte OpenLayers\" fig-align=\"left\"}\n\nSous la section commentée \"GeoServer Layer and source\", ajoutez les lignes suivantes :\n\n``` javascript\nvar url_geoserver = 'http://localhost/geoserver/land_matrix/wms'\nvar source_geoserver = new ol.source.ImageWMS({\n    url: url_geoserver,\n    params: {'LAYERS': 'land_matrix:deals'},\n    serverType: 'geoserver',\n})\nvar layer_geoserver = new ol.layer.Image({ source: source_geoserver })\n```\n\nEt ajoutez `layer_geoserver` à la liste de couches de `map` :\n\n``` javascript\n// Map\nvar map = new ol.Map({\n    target: 'map',\n    layers: [ layer_osm, layer_geoserver ],\n    view: new ol.View({\n    center: ol.proj.fromLonLat([2.1833, 41.3833]),\n    zoom: 2\n    })\n});\n```\n\nActualisez la carte. Vous devriez maintenant voir apparaître la couche \"deals\" de l’entrepôt \"land_matrix\" ! Décortiquons rapidement ces lignes de code.\n\n``` javascript\nvar url_geoserver = 'http://localhost/geoserver/land_matrix/wms'\n```\n\nOn récupère l’url de notre serveur. Si vous ne la trouvez pas, allez dans votre GeoServer et prévisualisez n’importe quelle couche. Récupérez l’url et coupez tout après \"wms\". `land_matrix` est l’URI que nous avons donné à notre espace de travail (voir la section Espaces de travail du TP).\n\n``` javascript\nvar source_geoserver = new ol.source.ImageWMS({\n    url: url_geoserver,\n    params: {'LAYERS': 'land_matrix:deals'},\n    serverType: 'geoserver',\n})\n```\n\nOn crée ensuite une nouvelle source de données de type `ImageWMS`. On indique l’url de la source, à savoir l’url de notre espace de données GeoServer stocké dans la variable `url_geoserver`. L’image prend aussi un ou plusieurs paramètres. On indique dans 'LAYERS' la couche qu’on souhaite afficher. Celle ligne s’écrit toujours sous la forme :\n\n``` javascript\n'LAYERS' : '<entrepôt>:<couche>'\n```\n\nSi vous avez un doute, allez dans \"Prévisualisation de la couche\" et regardez le contenu de la colonne \"Nom\". C’est la valeur à donner à 'LAYERS'.\n\nEnfin, on renseigne le type du serveur, ici 'geoserver'. Ce paramètre permet à OpenLayers de communiquer plus facilement avec GeoServer lorsque vous utiliserez des fonctionnalités plus avancées. De manière générale, cela vous permet aussi de vous souvenir du type de serveur avec lequel vous communiquez.\n\nChouette, après tout ça on a enfin réussi à créer, lire et afficher un flux WMS ! Sauf que, il manque encore quelque chose… la légende ! Et là vous me dites \"pitié, j’en peux plus, j’ai la tête qui va exploser\". Allez, encore un petit effort. On a vu que GeoServer est capable de générer tout seul une légende, il nous suffit donc de la récupérer. Pour ça, rien de plus facile ! Le serveur distribue les images comme il distribue les couches de données. Il nous suffit de récupérer l’image en question et l’afficher dans une nouvelle `<div>` sur notre carte.\n\nOn reviendra en détail le fonctionnement des légendes dans le TP sur OpenLayers. Commencez par créer une `<div>` pour la légende sous `<div id=\"map\"></div>` :\n\n``` html\n<div id=\"map\"></div>\n<div><img id=\"legend\" /></div>\n```\n\nNotre script permettra de modifier la source de l’image `legend` en interrogeant GeoServer à chaque fois qu’on fera changer la résolution de la carte. Dans le tag `<script>`, en dessous du code de la carte \"Map\", ajoutez les lignes suivantes :\n\n``` html\n<!-- App code -->\n<script>\n    //…\n\n    // Function to update the legend    \n    function updateLegend(resolution) {\n        const graphicUrl = source_geoserver.getLegendUrl(resolution, { 'LEGEND_OPTIONS' : 'forceLabels:on' });\n        const img = document.getElementById('legend');\n        img.src = graphicUrl;\n    };\n\n    // Initial legend\n    const resolution = map.getView().getResolution();\n    updateLegend(resolution);\n\n    // Update legend when resolution changes\n    map.getView().on('change:resolution', function (event) {\n        const resolution = event.target.getResolution();\n        updateLegend(resolution);\n    });\n\n</script>\n```\n\nEn résumé :\n\n-   La fonction `updateLegend()` permet de récupérer l’url de la légende depuis notre source GeoServer `source_geoserver` en utilisant la méthode `getLegendUrl()`. On modifie ensuite la source de notre image `<img id=\"legend\" />` sur l’url de la légende.\n\n-   La fonction `getLegendUrl()` a besoin de connaître la résolution de la carte pour fonctionner.\n\n-   Lorsque la carte est créée pour la première fois, on stocke sa résolution dans la variable `resolution`. La méthode `getView()` de l’objet `map` permet de récupérer la valeur de cette résolution. Ensuite, on exécute notre fonction `updateLegend()` pour récupérer la légende une première fois.\n\n-   Pour mettre à jour la légende lorsque la résolution change, on écoute les évènements `change:resolution` de la map. À chaque fois que la résolution change, on va récupérer à nouveau cette résolution et exécuter la fonction `updateLegend()`.\n\n::: {.callout-note collapse=\"true\"}\n## Code complet de l’application\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>GeoServer + OpenLayers</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width\">\n\n        <!-- CSS -->\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@main/dist/en/v7.1.0/ol/ol.css\" />\n        <style>\n        #map {\n            height: 500px;\n            width: 800px;\n        }\n        </style>\n    </head>\n    <body>\n        <h1>GeoServer + OpenLayers</h1>\n\n        <div id=\"map\"></div>\n        <div><img id=\"legend\" /></div>\n\n        <!-- OpenLayers JS-->\n        <script src=\"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@main/dist/en/v7.1.0/ol/dist/ol.js\"></script>\n\n        <!-- App code -->\n        <script>\n            // OSM layer and source\n            var source_osm = new ol.source.OSM()\n            var layer_osm = new ol.layer.Tile({ source: source_osm })\n\n            // GeoServer layer and source\n            var url_geoserver = 'http://localhost/geoserver/land_matrix/wms'\n            var source_geoserver = new ol.source.ImageWMS({\n                url: url_geoserver,\n                params: {'LAYERS': 'land_matrix:deals'},\n                serverType: 'geoserver',\n            })\n            var layer_geoserver = new ol.layer.Image({ source: source_geoserver })\n\n            // Map\n            var map = new ol.Map({\n                target: 'map',\n                layers: [ layer_osm, layer_geoserver ],\n                view: new ol.View({\n                center: ol.proj.fromLonLat([2.1833, 41.3833]),\n                zoom: 2\n                })\n            });\n\n            // Function to update the legend    \n            function updateLegend(resolution) {\n                const graphicUrl = source_geoserver.getLegendUrl(resolution, { 'LEGEND_OPTIONS' : 'forceLabels:on' });\n                const img = document.getElementById('legend');\n                img.src = graphicUrl;\n            };\n\n            // Initial legend\n            const resolution = map.getView().getResolution();\n            updateLegend(resolution);\n\n            // Update legend when resolution changes\n            map.getView().on('change:resolution', function (event) {\n                const resolution = event.target.getResolution();\n                updateLegend(resolution);\n            });\n\n        </script>\n\n    </body>\n</html>\n```\n:::\n\n**Ouf !** On a enfin une légende. Pour ceux qui ont encore le temps et l’énergie, je vous propose d’**afficher les autres couches et leur légende sur la carte**, au moins \"deals_by_country_centroids\" pour avoir nos cercles proportionnels. C’est parti !\n\n![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExOWFxaHJ2azNsbno2NzRwaDc2c29rdjJwbnltYmJqdjVzM3B3aHV4biZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/d31vTpVi1LAcDvdm/giphy.webp){fig-alt=\"GIF: Bob Ross\" fig-align=\"center\"}\n\n## Conclusion(s)\n\n-   C’est quoi l’intérêt du serveur carto, déjà ?\n\n    -   Centralisation de la donnée et mise à jour\n\n    -   Distribution de la donnée\n\n    -   Gestion des droits\n\n    -   Bien quand on a une organisation et bcp de données, s’intègre très bien dans une IDG\n\n    -   Bien pour les couches Raster et les couches Vecteur lourdes qui peuvent être servies en tant qu’images (WMS)\n\n    -   Connexion directe à une base de données PostgreSQL\n\n    -   Possibilité d’écrire des requêtes SQL pour former les couches\n\n    -   Possibilité de créer des styles complexes \"à la QGIS\".\n\n-   Est-ce que j’en ai besoin pour mon projet GeoNum ?\n\n    -   Ça dépend des données que vous utilisez et ce que vous en faites. Le mieux c’est d’en discuter avec les profs !\n\n-   Je n’utilise pas de connexion à une base de données, je préfère juste afficher des couches avec un style complexe. Ce serait pas plus simple si on pouvait directement importer les couches d’un projet QGIS ?\n\n![](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdzF3dWtlOGtjeHFmM2lheG05OGs2M2dmdmFsdnRjZ2t5am5tNnM1dSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/B9KKBuOIp4zqI7Cll0/giphy.webp){fig-alt=\"GIF: Clin d’œil\" fig-align=\"center\"}\n\n## TP - QGIS Server avec LizMap\n\n*En cours de rédaction, revenez plus tard !*\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"serveurs_carto.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":"flatly","title":"Serveurs cartographiques","subtitle":"Introduction aux serveurs cartographiques et à l’utilisation de GeoServer."},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}